{"docstore/metadata": {"247bcc3c-166c-4e1d-b7bf-b89b12432dbb": {"doc_hash": "fe5f6dbb5d74c672e67254ff328756778cc6fc5023b4054cc8489596bfc38b0c"}, "504d03f2-f63a-4a78-ba26-f2174a4d0dad": {"doc_hash": "e76739623baa5fcf682b9c33a5511948c6d9203a024726179a105cfadb2ad1ae"}, "1df3586a-38fb-48fd-afdc-238e74bea111": {"doc_hash": "99b945e16d01fe063dbe12c46fb117f78475820bbcf6c0527f290d430c5d5b9d"}, "3edafba9-7c7c-4bcb-b1da-05614d434e70": {"doc_hash": "044201f20dd9b5d29809017320db76e3581396b8ed18030e7e3802293fbbfb84"}, "c48223cc-c3ad-4000-9e21-920f781c5716": {"doc_hash": "38a8eece9967cc965b937d21e27677caf7ee82ca9c24d47ee28fcde4ac7f7913"}, "12d43681-7207-4c64-9271-ca3c8011311b": {"doc_hash": "0fe84c722e09c7b38e5b4d743b5aa459370c73bbbae4629714a4bf0c6beba565"}, "df9266e1-aed0-40e8-baa0-50c1176bc9ac": {"doc_hash": "7a3bf74e9c71e5a8e5b377364b090db3ec3221e4bdefdeb049f04bb314bbd5c6"}, "6dafd937-f703-40eb-9b35-fdfa06374640": {"doc_hash": "ea94901b6c655470c8066e3ceafb039c304cb455a0529f37e8e75ac2f4e6c1dd"}, "2b115dac-cb32-4bae-99fe-9cc1bd788c9c": {"doc_hash": "81319cc83f5a56d3ca1858fbb2e4ba0c59eeeff70b55f0c067c41b0eca04e90f"}, "62d3220a-2116-4a29-bcf9-e84cd6910dc3": {"doc_hash": "c5aeee8e51fff1bcb6cb99241f1e893c728396333a4d24a0efab1fc403c2cff7"}, "2d51054d-6664-4ee0-ba71-88f5bacfdcd8": {"doc_hash": "795d4e6147d7ef0a264cf8edf49a090b0e67ecc5b52dfdac621d8658da66a5aa"}, "4690e286-763b-4f23-b1b3-009c74df0c5e": {"doc_hash": "ec8f3e92d03f212e15fc1ee093304c5c56a59057d1e24d28fb6995c53857284b"}, "f5bf4f04-3d68-4d59-be14-3da4c8094397": {"doc_hash": "cd963e880376a43878aa41ffc00a7def3bb305f7f5d609c224f01f6e61aef383"}, "0749e919-af60-4d3b-8b3c-333a623117a3": {"doc_hash": "e49f8c1dfe1d4f9996858869422b900bc1efa500b53de06a0bf09247d1c1d72a"}, "ab5c9b84-0d38-4cbd-bf8e-62a83f09b1d1": {"doc_hash": "c4f1422a73f3c511df7117a5a04fce95247494466d1b873187e7a17708e98acb"}, "fdd9df16-251a-4233-8269-5b21371850ae": {"doc_hash": "8d02807ac3dc858dcf07e96b21aa722b4b369f4a50dc5374b42535985e366811"}, "d6278ccd-0a3b-4828-be53-7a715d1aa418": {"doc_hash": "1fa162292cb36c68142847ed8a0de8094212b13aba7abeb3a16213bbc7a598dd"}, "c276e4dd-7eb0-47ab-9fe1-01c8d3880ea0": {"doc_hash": "2cba3219eb9f2c4f83acadb3bc4957d8f6690f1eab027d9d20224fc1a478ff66"}, "4429fcb9-241a-44ce-bbbb-28be8a228e9c": {"doc_hash": "3c3fbaed5c0bf02f710557e8432698c6406afc08a909d0b205c1a0f90d8ea953"}, "de6ba9c8-ec35-456c-a781-e8ecc34e7bec": {"doc_hash": "7927cac5166dfe58c016c346eeec84baac0acacf2af8ac8d825efb0a685da18a"}, "4c57bff8-dbe3-4a5c-b732-d9d5217d4aab": {"doc_hash": "5c84d4a6bc155dde2a41552f7347960c40a875bbb095ae5f21048a67b54ad305"}, "1239de6d-e7d8-4883-be0f-190f81e639b1": {"doc_hash": "4f69b086aa0701eaaa1fe7947d096c725753a3a727f5b3a6c11a1e7c3de4a9a3"}, "b56ed615-ceeb-4964-bc9e-bb355b4355a4": {"doc_hash": "cf6ead36d44806d9830ee503ac3909459b1371fa4eebb7c9f5161a7db7f57e22"}, "f5b49194-ea72-4320-91dc-edc64de669a3": {"doc_hash": "915a8525568c07096ce9701c7dfa85d0c4d1b3f6d2042e6a5ace4b65159b8761"}, "c28fea0f-0f26-468f-9e3a-cab565d71d0a": {"doc_hash": "0ba4a599132e93700236a9c83df4465840babe561be31cc955948dbe9d6864d6"}, "a1d3396a-359c-4e00-acc0-82ff635a98ab": {"doc_hash": "b9db3ce904fc8c8f599d57b3012640ea2856f4e2dafddabaaabf0f696309c2ad"}, "86415156-f869-4a51-8ce9-dada516340f1": {"doc_hash": "fe5f6dbb5d74c672e67254ff328756778cc6fc5023b4054cc8489596bfc38b0c", "ref_doc_id": "247bcc3c-166c-4e1d-b7bf-b89b12432dbb"}, "1db94a8e-3e0e-4287-9bf1-a977b1489d19": {"doc_hash": "e76739623baa5fcf682b9c33a5511948c6d9203a024726179a105cfadb2ad1ae", "ref_doc_id": "504d03f2-f63a-4a78-ba26-f2174a4d0dad"}, "4b6ec685-c811-4a65-9ea2-08f1da836006": {"doc_hash": "99b945e16d01fe063dbe12c46fb117f78475820bbcf6c0527f290d430c5d5b9d", "ref_doc_id": "1df3586a-38fb-48fd-afdc-238e74bea111"}, "241c999c-71af-42b5-bf87-c878ea2831ca": {"doc_hash": "044201f20dd9b5d29809017320db76e3581396b8ed18030e7e3802293fbbfb84", "ref_doc_id": "3edafba9-7c7c-4bcb-b1da-05614d434e70"}, "212e7b72-fcd3-482a-9515-8a8ac37963d0": {"doc_hash": "38a8eece9967cc965b937d21e27677caf7ee82ca9c24d47ee28fcde4ac7f7913", "ref_doc_id": "c48223cc-c3ad-4000-9e21-920f781c5716"}, "d99d75cc-df71-4109-a5b6-56bf90318822": {"doc_hash": "aa7c8eb8dc05faf0fbb78afbec4cf457260e17e15cae3cc47656b6c87969a004", "ref_doc_id": "12d43681-7207-4c64-9271-ca3c8011311b"}, "353924a4-28e8-4871-8866-e3a295cb2c8d": {"doc_hash": "d67b1121ae2a3ff08f7de851a368029e0c8fb3504b2c22c79ba4ae49ad1bf427", "ref_doc_id": "12d43681-7207-4c64-9271-ca3c8011311b"}, "2a4ca47e-11b6-41f3-b172-3e80099c9bf6": {"doc_hash": "e690ae3682bd762e08fe1e861b3c61a143393a45f4a9a7be9b16b289595843e6", "ref_doc_id": "df9266e1-aed0-40e8-baa0-50c1176bc9ac"}, "49c7a14d-fe9f-40b1-a5a0-c2e47b332a39": {"doc_hash": "e69b8705d956dbc76040ed25903de3809a9661fb368d96f6491756888ed893cc", "ref_doc_id": "df9266e1-aed0-40e8-baa0-50c1176bc9ac"}, "4bede955-9568-4127-839d-1d4a1545dc87": {"doc_hash": "ea94901b6c655470c8066e3ceafb039c304cb455a0529f37e8e75ac2f4e6c1dd", "ref_doc_id": "6dafd937-f703-40eb-9b35-fdfa06374640"}, "44ce631e-1426-452b-8932-9fff97fe7091": {"doc_hash": "81319cc83f5a56d3ca1858fbb2e4ba0c59eeeff70b55f0c067c41b0eca04e90f", "ref_doc_id": "2b115dac-cb32-4bae-99fe-9cc1bd788c9c"}, "0781fa73-22c7-4282-becf-2d9a671e3d3d": {"doc_hash": "c5aeee8e51fff1bcb6cb99241f1e893c728396333a4d24a0efab1fc403c2cff7", "ref_doc_id": "62d3220a-2116-4a29-bcf9-e84cd6910dc3"}, "072fb5a7-46a0-4060-978c-c8645fde4a10": {"doc_hash": "795d4e6147d7ef0a264cf8edf49a090b0e67ecc5b52dfdac621d8658da66a5aa", "ref_doc_id": "2d51054d-6664-4ee0-ba71-88f5bacfdcd8"}, "299f57ae-a086-41e2-858e-1df4b8a3531a": {"doc_hash": "ec8f3e92d03f212e15fc1ee093304c5c56a59057d1e24d28fb6995c53857284b", "ref_doc_id": "4690e286-763b-4f23-b1b3-009c74df0c5e"}, "b2120f5b-e0f1-4d97-85cd-13ca6a7b30ba": {"doc_hash": "cd963e880376a43878aa41ffc00a7def3bb305f7f5d609c224f01f6e61aef383", "ref_doc_id": "f5bf4f04-3d68-4d59-be14-3da4c8094397"}, "23e30986-dd80-4603-b33e-4993ca4674f3": {"doc_hash": "e75ca82b7ad9fb23556941b75a0c12acc7cd33dd5d500f49f78d262c8b5865af", "ref_doc_id": "0749e919-af60-4d3b-8b3c-333a623117a3"}, "dfdbbf29-2a4b-45fb-badf-be8436b16ddb": {"doc_hash": "717db3dc80ab17989cbb83a074eeb8b7ef4cbf4f63240c7b907d760ca4209e7c", "ref_doc_id": "0749e919-af60-4d3b-8b3c-333a623117a3"}, "db0e6eef-20c6-4920-bc39-2d93d428b7a2": {"doc_hash": "0429d99943f9d6d8c094800a690026cdc927533d81075ff36f8499a93d307c9d", "ref_doc_id": "ab5c9b84-0d38-4cbd-bf8e-62a83f09b1d1"}, "0bada0cf-794a-40ca-8882-f94a563a2d65": {"doc_hash": "a7bc7b5f21911d462f67bdd612b7379ad858110d63c55881eba390c21d07dc6b", "ref_doc_id": "ab5c9b84-0d38-4cbd-bf8e-62a83f09b1d1"}, "2ab26c8f-3271-4b59-acf8-c902d20351f1": {"doc_hash": "8d02807ac3dc858dcf07e96b21aa722b4b369f4a50dc5374b42535985e366811", "ref_doc_id": "fdd9df16-251a-4233-8269-5b21371850ae"}, "5cd669f2-b142-4f10-a28e-e85bf4249bd4": {"doc_hash": "1fa162292cb36c68142847ed8a0de8094212b13aba7abeb3a16213bbc7a598dd", "ref_doc_id": "d6278ccd-0a3b-4828-be53-7a715d1aa418"}, "eda22710-26e2-44dc-83b1-83a7d842c8a5": {"doc_hash": "2cba3219eb9f2c4f83acadb3bc4957d8f6690f1eab027d9d20224fc1a478ff66", "ref_doc_id": "c276e4dd-7eb0-47ab-9fe1-01c8d3880ea0"}, "7d689815-fac1-464d-97e5-97b35ede1db8": {"doc_hash": "776bc26180beac1d5565122c13be264d6291da5fec37ed2ef132b5719e7129e7", "ref_doc_id": "4429fcb9-241a-44ce-bbbb-28be8a228e9c"}, "e30d1f37-1a28-4e43-ad3d-c88a664faa86": {"doc_hash": "63d2699393c6a015a3ffdfb16f33eaa9cc7c09dfa8ebf6ffdc0bdd49bddfdb3c", "ref_doc_id": "4429fcb9-241a-44ce-bbbb-28be8a228e9c"}, "a76e958a-bfcf-4b5f-9454-7d233c8c7d28": {"doc_hash": "157afc320a23c8ef0428896138c1e20581c840434919dbc4c8b405ff974ea0cf", "ref_doc_id": "de6ba9c8-ec35-456c-a781-e8ecc34e7bec"}, "61b6cae7-3a63-418f-837f-ac8a8815005d": {"doc_hash": "6aaca95c81d5aefc82f1fac2d4dc00602e4df9a67da3560c1fe580be2a70bd56", "ref_doc_id": "de6ba9c8-ec35-456c-a781-e8ecc34e7bec"}, "24554c59-3d68-49d1-9d98-9de7d8da5315": {"doc_hash": "5c84d4a6bc155dde2a41552f7347960c40a875bbb095ae5f21048a67b54ad305", "ref_doc_id": "4c57bff8-dbe3-4a5c-b732-d9d5217d4aab"}, "1752ff94-e54c-4a26-8267-5431b3a66776": {"doc_hash": "6ad968ffead6e7dd19f6190a8f7da0d3402090de8a4cbe76f4bf9db55db44ea6", "ref_doc_id": "1239de6d-e7d8-4883-be0f-190f81e639b1"}, "d9053eeb-861a-457b-aba8-2cbb92f86040": {"doc_hash": "2ec9ece8afc5c5d8abddd879efa40e88ac1741063503f3f03e2f860b6cff1248", "ref_doc_id": "1239de6d-e7d8-4883-be0f-190f81e639b1"}, "17b6a9a2-19d7-4346-accd-3959ddca986f": {"doc_hash": "93d897ceb1935907b516c7e1d4a07063e9b0c49a7e4ba0d20d864f45be7e757e", "ref_doc_id": "b56ed615-ceeb-4964-bc9e-bb355b4355a4"}, "a38fc42b-7c0f-4ecd-978e-6e95b955bc6a": {"doc_hash": "f82795d07466fc6acffefde58102ac77f1ad88d9d33ea3b21c8088e56e8e7107", "ref_doc_id": "b56ed615-ceeb-4964-bc9e-bb355b4355a4"}, "0d1149a8-b5a5-4e58-9e39-584d46a7ef59": {"doc_hash": "915a8525568c07096ce9701c7dfa85d0c4d1b3f6d2042e6a5ace4b65159b8761", "ref_doc_id": "f5b49194-ea72-4320-91dc-edc64de669a3"}, "287a4b0c-80be-4eda-aec4-b39d5de0f095": {"doc_hash": "0ba4a599132e93700236a9c83df4465840babe561be31cc955948dbe9d6864d6", "ref_doc_id": "c28fea0f-0f26-468f-9e3a-cab565d71d0a"}, "d1220fd7-046c-497d-a5ce-2537034c34dd": {"doc_hash": "b9db3ce904fc8c8f599d57b3012640ea2856f4e2dafddabaaabf0f696309c2ad", "ref_doc_id": "a1d3396a-359c-4e00-acc0-82ff635a98ab"}}, "docstore/data": {"86415156-f869-4a51-8ce9-dada516340f1": {"__data__": {"id_": "86415156-f869-4a51-8ce9-dada516340f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "247bcc3c-166c-4e1d-b7bf-b89b12432dbb", "node_type": "4", "metadata": {}, "hash": "fe5f6dbb5d74c672e67254ff328756778cc6fc5023b4054cc8489596bfc38b0c", "class_name": "RelatedNodeInfo"}}, "text": "# LORA: LOW-RANK ADAPTATION OF LARGE LANGUAGE MODELS\n\nEdward Hu\u2217, Yelong Shen\u2217, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, Weizhu Chen\n\nMicrosoft Corporation\n\n{edwardhu, yeshe, phwallis, zeyuana, yuanzhil, swang, luw, wzchen}@microsoft.com\n\nyuanzhil@andrew.cmu.edu\n\n(Version 2)\n\n# ABSTRACT\n\nAn important paradigm of natural language processing consists of large-scale pre-training on general domain data and adaptation to particular tasks or domains. As we pre-train larger models, full fine-tuning, which retrains all model parameters, becomes less feasible. Using GPT-3 175B as an example \u2013 deploying independent instances of fine-tuned models, each with 175B parameters, is prohibitively expensive. We propose Low-Rank Adaptation, or LoRA, which freezes the pre-trained model weights and injects trainable rank decomposition matrices into each layer of the Transformer architecture, greatly reducing the number of trainable parameters for downstream tasks. Compared to GPT-3 175B fine-tuned with Adam, LoRA can reduce the number of trainable parameters by 10,000 times and the GPU memory requirement by 3 times. LoRA performs on-par or better than fine-tuning in model quality on RoBERTa, DeBERTa, GPT-2, and GPT-3, despite having fewer trainable parameters, a higher training throughput, and, unlike adapters, no additional inference latency. We also provide an empirical investigation into rank-deficiency in language model adaptation, which sheds light on the efficacy of LoRA. We release a package that facilitates the integration of LoRA with PyTorch models and provide our implementations and model checkpoints for RoBERTa, DeBERTa, and GPT-2 at https://github.com/microsoft/LoRA.\n\n# 1 INTRODUCTION\n\nMany applications in natural language processing rely on adapting one large-scale, pre-trained language model to multiple downstream applications. Such adaptation is usually done via fine-tuning, which updates all the parameters of the pre-trained model. The major downside of fine-tuning is that the new model contains as many parameters as in the original model. As larger models are trained every few months, this changes from a mere \u201cinconvenience\u201d for GPT-2 (Radford et al., b) or RoBERTa large (Liu et al., 2019) to a critical deployment challenge for GPT-3 (Brown et al., 2020) with 175 billion trainable parameters.1\n\nMany sought to mitigate this by adapting only some parameters or learning external modules for new tasks. This way, we only need to store and load a small number of task-specific parameters in addition to the pre-trained model for each task, greatly boosting the operational efficiency when deployed. However, existing techniques\n\n\u2217Equal contribution.\n\n0 Compared to V1, this draft includes better baselines, experiments on GLUE, and more on adapter latency.\n\n1 While GPT-3 175B achieves non-trivial performance with few-shot learning, fine-tuning boosts its performance significantly as shown in Appendix A.\n\n# Figure 1: Our reparametrization.\n\nWe only train A and B", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1db94a8e-3e0e-4287-9bf1-a977b1489d19": {"__data__": {"id_": "1db94a8e-3e0e-4287-9bf1-a977b1489d19", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "504d03f2-f63a-4a78-ba26-f2174a4d0dad", "node_type": "4", "metadata": {}, "hash": "e76739623baa5fcf682b9c33a5511948c6d9203a024726179a105cfadb2ad1ae", "class_name": "RelatedNodeInfo"}}, "text": "# PROBLEM STATEMENT\n\nWhile our proposal is agnostic to training objective, we focus on language modeling as our motivating use case. Below is a brief description of the language modeling problem and, in particular, the maximization of conditional probabilities given a task-specific prompt.\n\nSuppose we are given a pre-trained autoregressive language model P\u03a6(y|x) parametrized by \u03a6. For instance, P\u03a6(y|x) can be a generic multi-task learner such as GPT (Radford et al., b; Brown et al., 2020) based on the Transformer architecture (Vaswani et al., 2017). Consider adapting this pre-trained model to downstream conditional text generation tasks, such as summarization, machine reading comprehension (MRC), and natural language to SQL (NL2SQL). Each downstream task is represented by a training dataset of context-target pairs: Z = {(xi, yi)}i=1,..,N, where both xi and yi are sequences of tokens. For example, in NL2SQL, xi is a natural language query and yi its corresponding SQL command; for summarization, xi is the content of an article and yi its summary.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1060, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b6ec685-c811-4a65-9ea2-08f1da836006": {"__data__": {"id_": "4b6ec685-c811-4a65-9ea2-08f1da836006", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1df3586a-38fb-48fd-afdc-238e74bea111", "node_type": "4", "metadata": {}, "hash": "99b945e16d01fe063dbe12c46fb117f78475820bbcf6c0527f290d430c5d5b9d", "class_name": "RelatedNodeInfo"}}, "text": "During full fine-tuning, the model is initialized to pre-trained weights \u03a60 and updated to \u03a60 + \u2206\u03a6 by repeatedly following the gradient to maximize the conditional language modeling objective:\n\n\u2211       \u2211log (P\u03a6(yt|x, y<t))\n\n|y|\n\nmax\u03a6                                                                       (1)\n\n(x,y)\u2208Zt=1\n\nOne of the main drawbacks for full fine-tuning is that for each downstream task, we learn a different set of parameters \u2206\u03a6 whose dimension |\u2206\u03a6| equals |\u03a60|. Thus, if the pre-trained model is large (such as GPT-3 with |\u03a60| \u2248 175 Billion), storing and deploying many independent instances of fine-tuned models can be challenging, if at all feasible.\n\nIn this paper, we adopt a more parameter-efficient approach, where the task-specific parameter increment \u2206\u03a6 = \u2206\u03a6(\u0398) is further encoded by a much smaller-sized set of parameters \u0398 with |\u0398| << |\u03a60|. The task of finding \u2206\u03a6 thus becomes optimizing over \u0398:\n\n\u2211      \u2211log (p\u03a60+\u2206\u03a6(\u0398)(yt|x, y<t))\n\n|y|\n\nmax\u0398                                                                            (2)\n\n(x,y)\u2208Zt=1\n\nIn the subsequent sections, we propose to use a low-rank representation to encode \u2206\u03a6 that is both compute- and memory-efficient. When the pre-trained model is GPT-3 175B, the number of trainable parameters |\u0398| can be as small as 0.01% of |\u03a60|.\n\n# 3     AREN\u2019T EXISTING SOLUTIONS GOOD ENOUGH?\n\nThe problem we set out to tackle is by no means new. Since the inception of transfer learning, dozens of works have sought to make model adaptation more parameter- and compute-efficient. See Section 6 for a survey of some of the well-known works. Using language modeling as an example, there are two prominent strategies when it comes to efficient adaptations: adding adapter layers (Houlsby et al., 2019; Rebuffi et al., 2017; Pfeiffer et al., 2021; R\u00a8uckl\u00b4e et al., 2020) or optimizing some forms of the input layer activations (Li & Liang, 2021; Lester et al., 2021; Hambardzumyan et al., 2020; Liu et al., 2021). However, both strategies have their limitations, especially in a large-scale and latency-sensitive production scenario.\n\n# Adapter Layers Introduce Inference Latency\n\nThere are many variants of adapters. We focus on the original design by Houlsby et al. (2019) which has two adapter layers per Transformer block and a more recent one by Lin et al. (2020) which has only one per block but with an additional LayerNorm (Ba et al., 2016). While one can reduce the overall latency by pruning layers or exploiting multi-task settings (R\u00a8uckl\u00b4e et al., 2020; Pfeiffer et al., 2021), there is no direct ways to bypass the extra compute in adapter layers. This seems like a non-issue since adapter layers are designed to have few parameters (sometimes <1% of the original model) by having a small bottleneck dimension, which limits the FLOPs they can add. However, large neural networks rely on hardware parallelism to keep the latency low, and adapter layers have to be processed sequentially. This makes a difference in the online inference setting where the batch size is typically as small as one. In a generic scenario without model parallelism, such as running inference on GPT-2 (Radford et al., b) medium on a single GPU, we see a noticeable increase in latency when using adapters, even with a very small bottleneck dimension (Table 1).\n\nThis problem gets worse when we need to shard the model as done in Shoeybi et al. (2020); Lepikhin et al. (2020), because the additional depth requires more synchronous GPU operations such as AllReduce and Broadcast, unless we store the adapter parameters redundantly many times.\n\n# Directly Optimizing the Prompt is Hard\n\nThe other direction, as exemplified by prefix tuning (Li & Liang, 2021), faces a different challenge. We observe that prefix tuning is difficult to optimize and that its performance changes non-monotonically in trainable parameters, confirming similar observations in the original paper. More fundamentally, reserving a part of the sequence length for adaptation necessarily reduces the sequence length available to process a downstream task, which we suspect makes tuning the prompt less performant compared to other methods. We defer the study on task performance to Section 5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "241c999c-71af-42b5-bf87-c878ea2831ca": {"__data__": {"id_": "241c999c-71af-42b5-bf87-c878ea2831ca", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3edafba9-7c7c-4bcb-b1da-05614d434e70", "node_type": "4", "metadata": {}, "hash": "044201f20dd9b5d29809017320db76e3581396b8ed18030e7e3802293fbbfb84", "class_name": "RelatedNodeInfo"}}, "text": "|Batch Size|32|16|1|\n|---|---|---|---|\n|Sequence Length|512|256|128|\n||\u0398||0.5M|11M|11M|\n|Fine-Tune/LoRA|1449.4\u00b10.8|338.0\u00b10.6|19.8\u00b12.7|\n|AdapterL|1482.0\u00b11.0 (+2.2%)|354.8\u00b10.5 (+5.0%)|23.9\u00b12.1 (+20.7%)|\n|AdapterH|1492.2\u00b11.0 (+3.0%)|366.3\u00b10.5 (+8.4%)|25.8\u00b12.2 (+30.3%)|\n\nTable 1: Inference latency of a single forward pass in GPT-2 medium measured in milliseconds, averaged over 100 trials. We use an NVIDIA Quadro RTX8000. \u201c|\u0398|\u201d denotes the number of trainable parameters in adapter layers. AdapterL and AdapterH are two variants of adapter tuning, which we describe in Section 5.1. The inference latency introduced by adapter layers can be significant in an online, short-sequence-length scenario. See the full study in Appendix B.\n\n# 4 OUR METHOD\n\nWe describe the simple design of LoRA and its practical benefits. The principles outlined here apply to any dense layers in deep learning models, though we only focus on certain weights in Transformer language models in our experiments as the motivating use case.\n\n# 4.1 LOW-RANK-PARAMETRIZED UPDATE MATRICES\n\nA neural network contains many dense layers which perform matrix multiplication. The weight matrices in these layers typically have full-rank. When adapting to a specific task, Aghajanyan et al. (2020) shows that the pre-trained language models have a low \u201cintrinsic dimension\u201d and can still learn efficiently despite a random projection to a smaller subspace. Inspired by this, we hypothesize the updates to the weights also have a low \u201cintrinsic rank\u201d during adaptation. For a pre-trained weight matrix W0 \u2208 Rd\u00d7k, we constrain its update by representing the latter with a low-rank decomposition W0 + \u2206W = W0 + BA, where B \u2208 Rd\u00d7r, A \u2208 Rr\u00d7k, and the rank r min(d, k).\n\nDuring training, W0 is frozen and does not receive gradient updates, while A and B contain trainable parameters. Note both W0 and \u2206W = BA are multiplied with the same input, and their respective output vectors are summed coordinate-wise. For h = W0x, our modified forward pass yields:\n\nh = W0x + \u2206W x = W0x + BAx\n\nWe illustrate our reparametrization in Figure 1. We use a random Gaussian initialization for A and \u03b1, where \u03b1 is zero for B, so \u2206W = BA is zero at the beginning of training. We then scale \u2206W x by r is a constant in r. When optimizing with Adam, tuning \u03b1 is roughly the same as tuning the learning rate if we scale the initialization appropriately. As a result, we simply set \u03b1 to the first r we try and do not tune it. This scaling helps to reduce the need to retune hyperparameters when we vary r (Yang & Hu, 2021).\n\nA Generalization of Full Fine-tuning. A more general form of fine-tuning allows the training of a subset of the pre-trained parameters. LoRA takes a step further and does not require the accumulated gradient update to weight matrices to have full-rank during adaptation. This means that when applying LoRA to all weight matrices and training all biases, we roughly recover the expressiveness of full fine-tuning by setting the LoRA rank r to the rank of the pre-trained weight matrices. In other words, as we increase the number of trainable parameters, training LoRA roughly converges to training the original model, while adapter-based methods converge to an MLP and prefix-based methods to a model that cannot take long input sequences.\n\nNo Additional Inference Latency. When deployed in production, we can explicitly compute and store W = W0 + BA and perform inference as usual. Note that both W0 and BA are in Rd\u00d7k. When we need to switch to another downstream task, we can recover W0 by subtracting BA and then adding a different B\u2032A, a quick operation with very little memory overhead. Critically, this represents a negligible number of parameters compared to weights.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "212e7b72-fcd3-482a-9515-8a8ac37963d0": {"__data__": {"id_": "212e7b72-fcd3-482a-9515-8a8ac37963d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c48223cc-c3ad-4000-9e21-920f781c5716", "node_type": "4", "metadata": {}, "hash": "38a8eece9967cc965b937d21e27677caf7ee82ca9c24d47ee28fcde4ac7f7913", "class_name": "RelatedNodeInfo"}}, "text": "# 4.2 APPLYING LORA TO TRANSFORMER\n\nIn principle, we can apply LoRA to any subset of weight matrices in a neural network to reduce the number of trainable parameters. In the Transformer architecture, there are four weight matrices in the self-attention module (Wq, Wk, Wv, Wo) and two in the MLP module. We treat Wq (or Wk, Wv) as a single matrix of dimension dmodel \u00d7 dmodel, even though the output dimension is usually sliced into attention heads. We limit our study to only adapting the attention weights for downstream tasks and freeze the MLP modules (so they are not trained in downstream tasks) both for simplicity and parameter-efficiency. We further study the effect on adapting different types of attention weight matrices in a Transformer in Section 7.1. We leave the empirical investigation of adapting the MLP layers, LayerNorm layers, and biases to a future work.\n\n# Practical Benefits and Limitations.\n\nThe most significant benefit comes from the reduction in memory and storage usage. For a large Transformer trained with Adam, we reduce that VRAM usage by up to 2/3 if r &lt; dmodel as we do not need to store the optimizer states for the frozen parameters. On GPT-3 175B, we reduce the VRAM consumption during training from 1.2TB to 350GB. With r = 4 and only the query and value projection matrices being adapted, the checkpoint size is reduced by roughly 10,000\u00d7 (from 350GB to 35MB)4. This allows us to train with significantly fewer GPUs and avoid I/O bottlenecks. Another benefit is that we can switch between tasks while deployed at a much lower cost by only swapping the LoRA weights as opposed to all the parameters. This allows for the creation of many customized models that can be swapped in and out on the fly on machines that store the pre-trained weights in VRAM. We also observe a 25% speedup during training on GPT-3 175B compared to full fine-tuning5 as we do not need to calculate the gradient for the vast majority of the parameters.\n\nLoRA also has its limitations. For example, it is not straightforward to batch inputs to different tasks with different A and B in a single forward pass, if one chooses to absorb A and B into W to eliminate additional inference latency. Though it is possible to not merge the weights and dynamically choose the LoRA modules to use for samples in a batch for scenarios where latency is not critical.\n\n# 5 EMPIRICAL EXPERIMENTS\n\nWe evaluate the downstream task performance of LoRA on RoBERTa (Liu et al., 2019), DeBERTa (He et al., 2021), and GPT-2 (Radford et al., b), before scaling up to GPT-3 175B (Brown et al., 2020). Our experiments cover a wide range of tasks, from natural language understanding (NLU) to generation (NLG). Specifically, we evaluate on the GLUE (Wang et al., 2019) benchmark for RoBERTa and DeBERTa. We follow the setup of Li & Liang (2021) on GPT-2 for a direct comparison and add WikiSQL (Zhong et al., 2017) (NL to SQL queries) and SAMSum (Gliwa et al., 2019) (conversation summarization) for large-scale experiments on GPT-3. See Appendix C for more details on the datasets we use. We use NVIDIA Tesla V100 for all experiments.\n\n# 5.1 BASELINES\n\nTo compare with other baselines broadly, we replicate the setups used by prior work and reuse their reported numbers whenever possible. This, however, means that some baselines might only appear in certain experiments. Fine-Tuning (FT) is a common approach for adaptation. During fine-tuning, the model is initialized to the pre-trained weights and biases, and all model parameters undergo gradient updates. A simple variant is to update only some layers while freezing others. We include one such baseline reported in prior work (Li & Liang, 2021) on GPT-2, which adapts just the last two layers (FTTop2).\n\n4 We still need the 350GB model during deployment; however, storing 100 adapted models only requires 350GB + 35MB * 100 \u2248 354GB as opposed to 100 * 350GB \u2248 35TB.\n\n5 For GPT-3 175B, the training throughput for full fine-tuning is 32.5 tokens/s per V100 GPU; with the same number of weight shards for model parallelism, the throughput is 43.1 tokens/s per V100 GPU for LoRA.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d99d75cc-df71-4109-a5b6-56bf90318822": {"__data__": {"id_": "d99d75cc-df71-4109-a5b6-56bf90318822", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "12d43681-7207-4c64-9271-ca3c8011311b", "node_type": "4", "metadata": {}, "hash": "0fe84c722e09c7b38e5b4d743b5aa459370c73bbbae4629714a4bf0c6beba565", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "353924a4-28e8-4871-8866-e3a295cb2c8d", "node_type": "1", "metadata": {}, "hash": "d67b1121ae2a3ff08f7de851a368029e0c8fb3504b2c22c79ba4ae49ad1bf427", "class_name": "RelatedNodeInfo"}}, "text": "# Model & Method\n\n|Trainable Parameters|MNLI|SST-2|MRPC|CoLA|QNLI|QQP|RTE|STS-B|Avg.|\n|---|---|---|---|---|---|---|---|---|---|\n|RoBbase (FT)*|125.0M|87.6|94.8|90.2|63.6|92.8|91.9|78.7|91.2|\n|RoBbase (BitFit)*| | | | | | | | | |\n|RoBbase (AdptD)*|0.1M|84.7|93.7|92.7|62.0|91.8|84.0|81.5|90.8|\n|RoBbase (AdptD)*|0.3M|87.1\u00b1.0|94.2\u00b1.1|88.5\u00b11.1|60.8\u00b1.4|93.1\u00b1.1|90.2\u00b1.0|71.5\u00b12.7|89.7\u00b1.3|\n| |0.9M|87.3\u00b1.1|94.7\u00b1.3|88.4\u00b1.1|62.6\u00b1.9|93.0\u00b1.2|90.6\u00b1.0|75.9\u00b12.2|90.3\u00b1.1|\n|RoBbase (LoRA)|0.3M|87.5\u00b1.3|95.1\u00b1.2|89.7\u00b1.7|63.4\u00b11.2|93.3\u00b1.3|90.8\u00b1.1|86.6\u00b1.7|91.5\u00b1.2|\n|RoBlarge (FT)*|355.0M|90.2|96.4|90.9|68.0|94.7|92.2|86.6|92.4|\n|RoBlarge (LoRA)|0.8M|90.6\u00b1.2|96.2\u00b1.5|90.9\u00b11.2|68.2\u00b11.9|94.9\u00b1.3|91.6\u00b1.1|87.4\u00b12.5|92.6\u00b1.2|\n|RoBlarge (AdptP)\u2020|3.0M|90.2\u00b1.3|96.1\u00b1.3|90.2\u00b1.7|68.3\u00b11.0|94.8\u00b1.2|91.9\u00b1.1|83.8\u00b12.9|92.1\u00b1.7|\n|RoBlarge (AdptP)\u2020|0.8M|90.5\u00b1.3|96.6\u00b1.2|89.7\u00b11.2|67.8\u00b12.5|94.8\u00b1.3|91.7\u00b1.2|80.1\u00b12.9|91.9\u00b1.4|\n|RoBlarge (AdptH)\u2020|6.0M|89.9\u00b1.5|96.2\u00b1.3|88.7\u00b12.9|66.5\u00b14.4|94.7\u00b1.2|92.1\u00b1.1|83.4\u00b11.1|91.0\u00b11.7|\n|RoBlarge (AdptH)\u2020|0.8M|90.3\u00b1.3|96.3\u00b1.5|87.7\u00b11.7|66.3\u00b12.0|94.7\u00b1.2|91.5\u00b1.1|72.9\u00b12.9|91.5\u00b1.5|\n|RoBlarge (LoRA)\u2020|0.8M|90.6\u00b1.2|96.2\u00b1.5|90.2\u00b11.0|68.2\u00b11.9|94.8\u00b1.3|91.6\u00b1.2|85.2\u00b11.1|92.3\u00b1.5|\n|DeBXXL (FT)*|1500.0M|91.8|97.2|92.0|72.0|96.0|92.7|93.9|92.9|\n|DeBXXL (LoRA)|4.7M|91.9\u00b1.2|96.9\u00b1.2|92.6\u00b1.6|72.4\u00b11.1|96.0\u00b1.1|92.9\u00b1.1|94.9\u00b1.4|93.0\u00b1.2|\n\nTable 2: RoBERTabase, RoBERTalarge, and DeBERTaXXL with different adaptation methods on the GLUE benchmark.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1414, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "353924a4-28e8-4871-8866-e3a295cb2c8d": {"__data__": {"id_": "353924a4-28e8-4871-8866-e3a295cb2c8d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "12d43681-7207-4c64-9271-ca3c8011311b", "node_type": "4", "metadata": {}, "hash": "0fe84c722e09c7b38e5b4d743b5aa459370c73bbbae4629714a4bf0c6beba565", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d99d75cc-df71-4109-a5b6-56bf90318822", "node_type": "1", "metadata": {}, "hash": "aa7c8eb8dc05faf0fbb78afbec4cf457260e17e15cae3cc47656b6c87969a004", "class_name": "RelatedNodeInfo"}}, "text": "We report the overall (matched and mismatched) accuracy for MNLI, Matthew\u2019s correlation for CoLA, Pearson correlation for STS-B, and accuracy for other tasks. Higher is better for all metrics. * indicates numbers published in prior works. \u2020 indicates runs configured in a setup similar to Houlsby et al. (2019) for a fair comparison.\n\nBias-only or BitFit is a baseline where we only train the bias vectors while freezing everything else. Contemporarily, this baseline has also been studied by BitFit (Zaken et al., 2021).\n\nPrefix-embedding tuning (PreEmbed) inserts special tokens among the input tokens. These special tokens have trainable word embeddings and are generally not in the model\u2019s vocabulary. Where to place such tokens can have an impact on performance. We focus on \u201cprefixing\u201d, which prepends such tokens to the prompt, and \u201cinfixing\u201d, which appends to the prompt; both are discussed in Li & Liang (2021). We use lp (resp. l) denote the number of prefix (resp. infix) tokens. The number of trainable parameters is |\u0398| = dmodel \u00d7 (lp + l).\n\nPrefix-layer tuning (PreLayer) is an extension to prefix-embedding tuning. Instead of just learning the word embeddings (or equivalently, the activations after the embedding layer) for some special tokens, we learn the activations after every Transformer layer. The activations computed from previous layers are simply replaced by trainable ones. The resulting number of trainable parameters is |\u0398| = L \u00d7 dmodel \u00d7 (lp + l), where L is the number of Transformer layers.\n\nAdapter tuning as proposed in Houlsby et al. (2019) inserts adapter layers between the self-attention module (and the MLP module) and the subsequent residual connection. There are two fully connected layers with biases in an adapter layer with a nonlinearity in between. We call this original design AdapterH. Recently, Lin et al. (2020) proposed a more efficient design with the adapter layer applied only after the MLP module and after a LayerNorm. We call it AdapterL. This is very similar to another design proposed in Pfeiffer et al. (2021), which we call AdapterP. We also include another baseline called AdapterDrop (R\u00fcckl\u00e9 et al., 2020) which drops some adapter layers for greater efficiency (AdapterD). We cite numbers from prior works whenever possible to maximize the number of baselines we compare with; they are in rows with an asterisk (*) in the first column.\n\nIn all cases, we have |\u0398| = L\u02c6Adpt \u00d7 (2 \u00d7 dmodel \u00d7 r + r + dmodel) + 2 \u00d7 L\u02c6LN \u00d7 dmodel where L\u02c6Adpt is the number of adapter layers and L\u02c6LN the number of trainable LayerNorms (e.g., in Adapter LoRA adds trainable pairs of rank decomposition matrices in parallel to existing weight matrices. As mentioned in Section 4.2, we only apply LoRA to Wq and Wv in most experiments for simplicity. The number of trainable parameters is determined by the rank r and the shape of the original weights: |\u0398| = 2 \u00d7 L\u02c6LoRA \u00d7 dmodel \u00d7 r, where L\u02c6LoRA is the number of weight matrices we apply LoRA to.", "mimetype": "text/plain", "start_char_idx": 1415, "end_char_idx": 4401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a4ca47e-11b6-41f3-b172-3e80099c9bf6": {"__data__": {"id_": "2a4ca47e-11b6-41f3-b172-3e80099c9bf6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df9266e1-aed0-40e8-baa0-50c1176bc9ac", "node_type": "4", "metadata": {}, "hash": "7a3bf74e9c71e5a8e5b377364b090db3ec3221e4bdefdeb049f04bb314bbd5c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49c7a14d-fe9f-40b1-a5a0-c2e47b332a39", "node_type": "1", "metadata": {}, "hash": "e69b8705d956dbc76040ed25903de3809a9661fb368d96f6491756888ed893cc", "class_name": "RelatedNodeInfo"}}, "text": "# 5.2 ROBERTA BASE/LARGE\n\nRoBERTa (Liu et al., 2019) optimized the pre-training recipe originally proposed in BERT (Devlin et al., 2019a) and boosted the latter\u2019s task performance without introducing many more trainable parameters. While RoBERTa has been overtaken by much larger models on NLP leaderboards such as the GLUE benchmark (Wang et al., 2019) in recent years, it remains a competitive and popular pre-trained model for its size among practitioners. We take the pre-trained RoBERTa base (125M) and RoBERTa large (355M) from the HuggingFace Transformers library (Wolf et al., 2020) and evaluate the performance of different efficient adaptation approaches on tasks from the GLUE benchmark. We also replicate Houlsby et al. (2019) and Pfeiffer et al. (2021) according to their setup. To ensure a fair comparison, we make two crucial changes to how we evaluate LoRA when comparing with adapters. First, we use the same batch size for all tasks and use a sequence length of 128 to match the adapter baselines. Second, we initialize the model to the pre-trained model for MRPC, RTE, and STS-B, not a model already adapted to MNLI like the fine-tuning baseline. Runs following this more restricted setup from Houlsby et al. (2019) are labeled with \u2020. The result is presented in Table 2 (Top Three Sections). See Section D.1 for details on the hyperparameters used.\n\n# 5.3 DEBERTA XXL\n\nDeBERTa (He et al., 2021) is a more recent variant of BERT that is trained on a much larger scale and performs very competitively on benchmarks such as GLUE (Wang et al., 2019) and SuperGLUE (Wang et al., 2020). We evaluate if LoRA can still match the performance of a fully fine-tuned DeBERTa XXL (1.5B) on GLUE. The result is presented in Table 2 (Bottom Section). See Section D.2 for details on the hyperparameters used.\n\n# 5.4 GPT-2 MEDIUM/LARGE\n\nHaving shown that LoRA can be a competitive alternative to full fine-tuning on NLU, we hope to answer if LoRA still prevails on NLG models, such as GPT-2 medium and large (Radford et al., b). We keep our setup as close as possible to Li & Liang (2021) for a direct comparison. Due to space constraint, we only present our result on E2E NLG Challenge (Table 3) in this section. See Section F.1 for results on WebNLG (Gardent et al., 2017) and DART (Nan et al., 2020). We include a list of the hyperparameters used in Section D.3.\n\n# Table 3: GPT-2 medium (M) and large (L) with different adaptation methods on the E2E NLG Challenge. For all metrics, higher is better. LoRA outperforms several baselines with comparable or fewer trainable parameters. Confidence intervals are shown for experiments we ran. * indicates numbers published in prior works.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2689, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49c7a14d-fe9f-40b1-a5a0-c2e47b332a39": {"__data__": {"id_": "49c7a14d-fe9f-40b1-a5a0-c2e47b332a39", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df9266e1-aed0-40e8-baa0-50c1176bc9ac", "node_type": "4", "metadata": {}, "hash": "7a3bf74e9c71e5a8e5b377364b090db3ec3221e4bdefdeb049f04bb314bbd5c6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a4ca47e-11b6-41f3-b172-3e80099c9bf6", "node_type": "1", "metadata": {}, "hash": "e690ae3682bd762e08fe1e861b3c61a143393a45f4a9a7be9b16b289595843e6", "class_name": "RelatedNodeInfo"}}, "text": "We keep our setup as close as possible to Li & Liang (2021) for a direct comparison. Due to space constraint, we only present our result on E2E NLG Challenge (Table 3) in this section. See Section F.1 for results on WebNLG (Gardent et al., 2017) and DART (Nan et al., 2020). We include a list of the hyperparameters used in Section D.3.\n\n# Table 3: GPT-2 medium (M) and large (L) with different adaptation methods on the E2E NLG Challenge. For all metrics, higher is better. LoRA outperforms several baselines with comparable or fewer trainable parameters. Confidence intervals are shown for experiments we ran. * indicates numbers published in prior works.\n\n|Model & Method|# Trainable Parameters|BLEU|NIST|MET|ROUGE-L|CIDEr|\n|---|---|---|---|---|---|---|\n|GPT-2 M (FT)*|354.92M|68.2|8.62|46.2|71.0|2.47|\n|GPT-2 M (AdapterL)*|0.37M|66.3|8.41|45.0|69.8|2.40|\n|GPT-2 M (AdapterL)*|11.09M|68.9|8.71|46.1|71.3|2.47|\n|GPT-2 M (AdapterH)|11.09M|67.3\u00b1.6|8.50\u00b1.07|46.0\u00b1.2|70.7\u00b1.2|2.44\u00b1.01|\n|GPT-2 M (FTTop2)*|25.19M|68.1|8.59|46.0|70.8|2.41|\n|GPT-2 M (PreLayer)*|0.35M|69.7|8.81|46.1|71.4|2.49|\n|GPT-2 M (LoRA)|0.35M|70.4\u00b1.1|8.85\u00b1.02|46.8\u00b1.2|71.8\u00b1.1|2.53\u00b1.02|\n|GPT-2 L (FT)*|774.03M|68.5|8.78|46.0|69.9|2.45|\n|GPT-2 L (AdapterL)|0.88M|69.1\u00b1.1|8.68\u00b1.03|46.3\u00b1.0|71.4\u00b1.2|2.49\u00b1.0|\n|GPT-2 L (AdapterL)|23.00M|68.9\u00b1.3|8.70\u00b1.04|46.1\u00b1.1|71.3\u00b1.2|2.45\u00b1.02|\n|GPT-2 L (PreLayer)*|0.77M|70.3|8.85|46.2|71.7|2.47|\n|GPT-2 L (LoRA)|0.77M|70.4\u00b1.1|8.89\u00b1.02|46.8\u00b1.2|72.0\u00b1.2|2.47\u00b1.02|", "mimetype": "text/plain", "start_char_idx": 2032, "end_char_idx": 3489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bede955-9568-4127-839d-1d4a1545dc87": {"__data__": {"id_": "4bede955-9568-4127-839d-1d4a1545dc87", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6dafd937-f703-40eb-9b35-fdfa06374640", "node_type": "4", "metadata": {}, "hash": "ea94901b6c655470c8066e3ceafb039c304cb455a0529f37e8e75ac2f4e6c1dd", "class_name": "RelatedNodeInfo"}}, "text": "# 4 Performance of different adaptation methods on GPT-3 175B\n\n|Model & Method|# Trainable Parameters|WikiSQL Acc. (%)|MNLI-m Acc. (%)|SAMSum R1/R2/RL|\n|---|---|---|---|---|\n|GPT-3 (FT)|175,255.8M|73.8|89.5|52.0/28.0/44.5|\n|GPT-3 (BitFit)|14.2M|71.3|91.0|51.3/27.4/43.5|\n|GPT-3 (PreEmbed)|3.2M|63.1|88.6|48.3/24.2/40.5|\n|GPT-3 (PreLayer)|20.2M|70.1|89.5|50.8/27.3/43.5|\n|GPT-3 (AdapterH)|7.1M|71.9|89.8|53.0/28.9/44.8|\n|GPT-3 (AdapterH)|40.1M|73.2|91.5|53.2/29.0/45.1|\n|GPT-3 (LoRA)|4.7M|73.4|91.7|53.8/29.8/45.9|\n|GPT-3 (LoRA)|37.7M|74.0|91.6|53.4/29.2/45.1|\n\nWe report the logical form validation accuracy on WikiSQL, validation accuracy on MultiNLI-matched, and Rouge-1/2/L on SAMSum. LoRA performs better than prior approaches, including full fine-tuning. The results on WikiSQL have a fluctuation around \u00b10.5%, MNLI-m around \u00b10.1%, and SAMSum around \u00b10.2/\u00b10.2/\u00b10.1 for the three metrics.\n\n# 5.5 SCALING UP TO GPT-3 175B\n\nAs a final stress test for LoRA, we scale up to GPT-3 with 175 billion parameters. Due to the high training cost, we only report the typical standard deviation for a given task over random seeds, as opposed to providing one for every entry. See Section D.4 for details on the hyperparameters used. As shown in Table 4, LoRA matches or exceeds the fine-tuning baseline on all three datasets. Note that not all methods benefit monotonically from having more trainable parameters, as shown in Figure 2. We observe a significant performance drop when we use more than 256 special tokens for prefix-embedding tuning or more than 32 special tokens for prefix-layer tuning. This corroborates similar observations in Li & Liang (2021). While a thorough investigation into this phenomenon is out-of-scope for this work, we suspect that having more special tokens causes the input distribution to shift further away from the pre-training data distribution. Separately, we investigate the performance of different adaptation approaches in the low-data regime in Section F.3.\n\n# Figure 2: GPT-3 175B validation accuracy vs. number of trainable parameters of several adaptation methods on WikiSQL and MNLI-matched.\n\n|WikiSQL|MultiNLI-matched|\n|---|---|\n|0.75| |\n|0.70| |\n|0.65|Fine-Tune|\n|0.60|PrefixEmbed|\n|0.55|PrefixLayer|\n| |Adapter(H)|\n| |LoRA|\n\n# 6 RELATED WORKS\n\nTransformer Language Models. Transformer (Vaswani et al., 2017) is a sequence-to-sequence architecture that makes heavy use of self-attention. Radford et al. (a) applied it to autoregressive language modeling by using a stack of Transformer decoders. Since then, Transformer-based language models have dominated NLP, achieving the state-of-the-art in many tasks. A new paradigm emerged with BERT (Devlin et al., 2019b) and GPT-2 (Radford et al., b) \u2013 both are large Transformer language models.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44ce631e-1426-452b-8932-9fff97fe7091": {"__data__": {"id_": "44ce631e-1426-452b-8932-9fff97fe7091", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2b115dac-cb32-4bae-99fe-9cc1bd788c9c", "node_type": "4", "metadata": {}, "hash": "81319cc83f5a56d3ca1858fbb2e4ba0c59eeeff70b55f0c067c41b0eca04e90f", "class_name": "RelatedNodeInfo"}}, "text": "# 7 UNDERSTANDING THE LOW-RANK UPDATES\n\nGiven the empirical advantage of LoRA, we hope to further explain the properties of the low-rank adaptation learned from downstream tasks. Note that the low-rank structure not only lowers the hardware barrier to entry which allows us to run multiple experiments in parallel, but also gives better interpretability of how the update weights are correlated with the pre-trained weights. We focus our study on GPT-3 175B, where we achieved the largest reduction of trainable parameters (up to 10,000\u00d7) without adversely affecting task performances.\n\nWe perform a sequence of empirical studies to answer the following questions: 1) Given a parameter budget constraint, which subset of weight matrices in a pre-trained Transformer should we adapt.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 782, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0781fa73-22c7-4282-becf-2d9a671e3d3d": {"__data__": {"id_": "0781fa73-22c7-4282-becf-2d9a671e3d3d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "62d3220a-2116-4a29-bcf9-e84cd6910dc3", "node_type": "4", "metadata": {}, "hash": "c5aeee8e51fff1bcb6cb99241f1e893c728396333a4d24a0efab1fc403c2cff7", "class_name": "RelatedNodeInfo"}}, "text": "# 7.1 WHICH WEIGHT MATRICES IN TRANSFORMER SHOULD WE APPLY LORA TO?\n\nGiven a limited parameter budget, which types of weights should we adapt with LoRA to obtain the best performance on downstream tasks? As mentioned in Section 4.2, we only consider weight matrices in the self-attention module. We set a parameter budget of 18M (roughly 35MB if stored in FP16) on GPT-3 175B, which corresponds to r = 8 if we adapt one type of attention weights or r = 4 if we adapt two types, for all 96 layers. The result is presented in Table 5.\n\n|Weight Type|Wq|Wk|Wv|Wo|Wq, Wk|Wq, Wv|Wq, Wk, Wv, Wo|\n|---|---|---|---|---|---|---|---|\n|Rank r|8|8|8|8|4|4|2|\n|WikiSQL (\u00b10.5%)|70.4|70.0|73.0|73.2|71.4|73.7|73.7|\n|MultiNLI (\u00b10.1%)|91.0|90.8|91.0|91.3|91.3|91.3|91.7|\n\nTable 5: Validation accuracy on WikiSQL and MultiNLI after applying LoRA to different types of attention weights in GPT-3, given the same number of trainable parameters. Adapting both Wq and Wv gives the best performance overall. We find the standard deviation across random seeds to be consistent for a given dataset, which we report in the first column.\n\nNote that putting all the parameters in \u2206Wq or \u2206Wk results in significantly lower performance, while adapting both Wq and Wv yields the best result. This suggests that even a rank of four captures enough information in \u2206W such that it is preferable to adapt more weight matrices than adapting a single type of weights with a larger rank.\n\n# 7.2 WHAT IS THE OPTIMAL RANK r FOR LORA?\n\nWe turn our attention to the effect of rank r on model performance. We adapt {Wq, Wv}, {Wq, Wk, Wv, W}, and just Wq for a comparison.\n\n|Weight Type|r = 1|r = 2|r = 4|r = 8|r = 64|\n|---|---|---|---|---|---|\n|WikiSQL (\u00b10.5%) Wq|68.8|69.6|70.5|70.4|70.0|\n|Wq, Wv|73.4|73.3|73.7|73.8|73.5|\n|Wq, Wk, Wv, Wo|74.1|73.7|74.0|74.0|73.9|\n|MultiNLI (\u00b10.1%) Wq|90.7|90.9|91.1|90.7|90.7|\n|Wq, Wk, Wv, WoWq, Wv|91.3|91.4|91.3|91.6|91.4|\n| |91.2|91.7|91.7|91.5|91.4|\n\nTable 6: Validation accuracy on WikiSQL and MultiNLI with different rank r. To our surprise, a rank as small as one suffices for adapting both Wq and Wv on these datasets while training Wq alone needs a larger r. We conduct a similar experiment on GPT-2 in Section H.2.\n\nTable 6 shows that, surprisingly, LoRA already performs competitively with a very small r (more so for {Wq, Wv} than just Wq). This suggests the update matrix \u2206W could have a very small different choices of r and by different random seeds. We argue that increasing r does not cover a more meaningful subspace, which suggests that a low-rank adaptation matrix is sufficient.\n\nHowever, we do not expect a small r to work for every task or dataset. Consider the following thought experiment: if the downstream task were in a different language than the one used for pre-training, retraining the entire model (similar to LoRA with r = dmodel) could certainly outperform LoRA with a small r.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2904, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "072fb5a7-46a0-4060-978c-c8645fde4a10": {"__data__": {"id_": "072fb5a7-46a0-4060-978c-c8645fde4a10", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d51054d-6664-4ee0-ba71-88f5bacfdcd8", "node_type": "4", "metadata": {}, "hash": "795d4e6147d7ef0a264cf8edf49a090b0e67ecc5b52dfdac621d8658da66a5aa", "class_name": "RelatedNodeInfo"}}, "text": "# Subspace similarity between different r.\n\nGiven Ar=8 and Ar=64 which are the learned adaptation matrices with rank r = 8 and 64 using the same pre-trained model, we perform singular value decomposition and obtain the right-singular unitary matrices UAr=8 and UAr=64. We hope to answer: how much of the subspace spanned by the top i singular vectors in UAr=8 (for 1 \u2264 i \u2264 8) is contained in the subspace spanned by top j singular vectors of UAr=64 (for 1 \u2264 j \u2264 64)? We measure this quantity with a normalized subspace similarity based on the Grassmann distance (See Appendix G for a more formal discussion).\n\n\u03c6(Ar=8, Ar=64, i, j) = ||UAr=8 Uj=64||2i A F35\u2208 [0, 1] (4)\n\n\u03c6(\u00b7) has a range of [0, 1], where 1 represents a complete overlap of subspaces and 0 a complete separation. See Figure 3 for how \u03c6 changes as we vary i and j. We only look at the 48th layer (out of 96) due to space constraint, but the conclusion holds for other layers as well, as shown in Section H.1.\n\n# (Ar = 64, Ar = 8, i, j)\n\n|Wq|Wv|Wq|Wv|\n|---|---|---|---|\n|1.0| |1.0| |\n|0.8| |0.8| |\n|0.6| |0.6| |\n|0.4| |0.4| |\n|0.2| |0.2| |\n|0.0| |0.0| |\n\nFigure 3: Subspace similarity between column vectors of Ar=8 and Ar=64 for both \u2206Wq and \u2206Wv. The third and the fourth figures zoom in on the lower-left triangle in the first two figures. The top directions in r = 8 are included in r = 64, and vice versa.\n\nWe make an important observation from Figure 3. Directions corresponding to the top singular vector overlap significantly between Ar=8 and Ar=64, while others do not. Specifically, \u2206Wv (resp. \u2206Wq) of Ar=8 and \u2206Wv (resp. \u2206Wq) of Ar=64 share a subspace of dimension 1 with normalized similarity > 0.5, providing an explanation of why r = 1 performs quite well in our downstream tasks for GPT-3.\n\nSince both Ar=8 and Ar=64 are learned using the same pre-trained model, Figure 3 indicates that the top singular-vector directions of Ar=8 and Ar=64 are the most useful, while other directions potentially contain mostly random noises accumulated during training. Hence, the adaptation matrix can indeed have a very low rank.\n\n# Subspace similarity between different random seeds.\n\nWe further confirm this by plotting the normalized subspace similarity between two randomly seeded runs with r = 64, shown in Figure 4. \u2206Wq appears to have a higher \u201cintrinsic rank\u201d than \u2206Wv, since more common singular value directions are learned by both runs for \u2206Wq, which is in line with our empirical observation in Table 6. As a comparison, we also plot two random Gaussian matrices, which do not share any common singular value directions with each other.\n\n# HOW DOES THE ADAPTATION MATRIX \u2206W COMPARE TO W?\n\nWe further investigate the relationship between \u2206W and W. In particular, does \u2206W highly correlate with W? (Or mathematically, is \u2206W mostly contained in the top singular directions of W?) Also, note that a similar analysis can be carried out with B and the left-singular unitary matrices \u2013 we stick with A for our experiments.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "299f57ae-a086-41e2-858e-1df4b8a3531a": {"__data__": {"id_": "299f57ae-a086-41e2-858e-1df4b8a3531a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4690e286-763b-4f23-b1b3-009c74df0c5e", "node_type": "4", "metadata": {}, "hash": "ec8f3e92d03f212e15fc1ee093304c5c56a59057d1e24d28fb6995c53857284b", "class_name": "RelatedNodeInfo"}}, "text": "# Figure 4\n\nLeft and Middle: Normalized subspace similarity between the column vectors of Ar=645459 from two random seeds, for both \u2206Wq and \u2206Wv in the 48-th layer. Right: the same heat-map between the column vectors of two random Gaussian matrices. See Section H.1 for other layers.\n\n# Table 7\n\n|r|\u2206Wq|Wq|Random|\u2206Wq|Wq|Random|\n|---|---|---|---|---|---|---|\n|4|||U >Wq V>||F = 0.32|21.67|0.02|1.90|37.71|0.33|\n|64|||Wq ||F = 61.95|||\u2206Wq ||F = 6.91|||\u2206Wq ||F = 3.57| | | |\n\nWe draw several conclusions from Table 7. First, \u2206W has a stronger correlation with W compared to a random matrix, indicating that \u2206W amplifies some features that are already in W. Second, instead of repeating the top singular directions of W, \u2206W only amplifies directions that are not emphasized in W. Third, the amplification factor is rather huge: 21.5 \u2248 6.91/0.32 for r = 4. See Section H.4 for why r = 64 has a smaller amplification factor. We also provide a visualization in Section H.3 for how the correlation changes as we include more top singular directions from Wq. This suggests that the low-rank adaptation matrix potentially amplifies the important features for specific downstream tasks that were learned but not emphasized in the general pre-training model.\n\n# 8 CONCLUSION AND FUTURE WORK\n\nFine-tuning enormous language models is prohibitively expensive in terms of the hardware required and the storage/switching cost for hosting independent instances for different tasks. We propose LoRA, an efficient adaptation strategy that neither introduces inference latency nor reduces input sequence length while retaining high model quality. Importantly, it allows for quick task-switching when deployed as a service by sharing the vast majority of the model parameters. While we focused on Transformer language models, the proposed principles are generally applicable to any neural networks with dense layers.\n\nThere are many directions for future works. 1) LoRA can be combined with other efficient adaptation methods, potentially providing orthogonal improvement. 2) The mechanism behind fine-tuning or LoRA is far from clear \u2013 how are features learned during pre-training transformed to do well on downstream tasks? We believe that LoRA makes it more tractable to answer this than full fine-tuning.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2120f5b-e0f1-4d97-85cd-13ca6a7b30ba": {"__data__": {"id_": "b2120f5b-e0f1-4d97-85cd-13ca6a7b30ba", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f5bf4f04-3d68-4d59-be14-3da4c8094397", "node_type": "4", "metadata": {}, "hash": "cd963e880376a43878aa41ffc00a7def3bb305f7f5d609c224f01f6e61aef383", "class_name": "RelatedNodeInfo"}}, "text": "# REFERENCES\n\nArmen Aghajanyan, Luke Zettlemoyer, and Sonal Gupta. Intrinsic Dimensionality Explains the Effectiveness of Language Model Fine-Tuning. arXiv:2012.13255 [cs], December 2020. URL http://arxiv.org/abs/2012.13255.\n\nZeyuan Allen-Zhu and Yuanzhi Li. What Can ResNet Learn Efficiently, Going Beyond Kernels? In NeurIPS, 2019. Full version available at http://arxiv.org/abs/1905.10337.\n\nZeyuan Allen-Zhu and Yuanzhi Li. Backward feature correction: How deep learning performs deep learning. arXiv preprint arXiv:2001.04413, 2020a.\n\nZeyuan Allen-Zhu and Yuanzhi Li. Feature purification: How adversarial training performs robust deep learning. arXiv preprint arXiv:2005.10190, 2020b.\n\nZeyuan Allen-Zhu, Yuanzhi Li, and Zhao Song. A convergence theory for deep learning via over-parameterization. In ICML, 2019. Full version available at http://arxiv.org/abs/1811.03962.\n\nJimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E. Hinton. Layer normalization, 2016.\n\nTom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. Language Models are Few-Shot Learners. arXiv:2005.14165 [cs], July 2020. URL http://arxiv.org/abs/2005.14165.\n\nJian-Feng Cai, Emmanuel J Cand\u00e8s, and Zuowei Shen. A singular value thresholding algorithm for matrix completion. SIAM Journal on optimization, 20(4):1956\u20131982, 2010.\n\nDaniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-Gazpio, and Lucia Specia. Semeval-2017 task 1: Semantic textual similarity multilingual and crosslingual focused evaluation. Proceedings of the 11th International Workshop on Semantic Evaluation (SemEval-2017), 2017. doi: 10.18653/v1/s17-2001. URL http://dx.doi.org/10.18653/v1/S17-2001.\n\nRonan Collobert and Jason Weston. A unified architecture for natural language processing: deep neural networks with multitask learning. In Proceedings of the 25th international conference on Machine learning, ICML \u201908, pp. 160\u2013167, New York, NY, USA, July 2008. Association for Computing Machinery. ISBN 978-1-60558-205-4. doi: 10.1145/1390156.1390177. URL https://doi.org/10.1145/1390156.1390177.\n\nMisha Denil, Babak Shakibi, Laurent Dinh, Marc\u2019Aurelio Ranzato, and Nando de Freitas. Predicting parameters in deep learning, 2014.\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding, 2019a.\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. arXiv:1810.04805 [cs], May 2019b. URL http://arxiv.org/abs/1810.04805.\n\nWilliam B. Dolan and Chris Brockett. Automatically constructing a corpus of sentential paraphrases. In Proceedings of the Third International Workshop on Paraphrasing (IWP2005), 2005. URL https://aclanthology.org/I05-5002.\n\nClaire Gardent, Anastasia Shimorina, Shashi Narayan, and Laura Perez-Beltrachini. The webnlg challenge: Generating text from rdf data. In Proceedings of the 10th International Conference on Natural Language Generation, pp. 124\u2013133, 2017.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23e30986-dd80-4603-b33e-4993ca4674f3": {"__data__": {"id_": "23e30986-dd80-4603-b33e-4993ca4674f3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0749e919-af60-4d3b-8b3c-333a623117a3", "node_type": "4", "metadata": {}, "hash": "e49f8c1dfe1d4f9996858869422b900bc1efa500b53de06a0bf09247d1c1d72a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dfdbbf29-2a4b-45fb-badf-be8436b16ddb", "node_type": "1", "metadata": {}, "hash": "717db3dc80ab17989cbb83a074eeb8b7ef4cbf4f63240c7b907d760ca4209e7c", "class_name": "RelatedNodeInfo"}}, "text": "# References\n\nBehrooz Ghorbani, Song Mei, Theodor Misiakiewicz, and Andrea Montanari. When do neural networks outperform kernel methods? arXiv preprint arXiv:2006.13409, 2020.\n\nBogdan Gliwa, Iwona Mochol, Maciej Biesek, and Aleksander Wawer. Samsum corpus: A human-annotated dialogue dataset for abstractive summarization. CoRR, abs/1911.12237, 2019. URL http://arxiv.org/abs/1911.12237.\n\nLars Grasedyck, Daniel Kressner, and Christine Tobler. A literature survey of low-rank tensor approximation techniques. GAMM-Mitteilungen, 36(1):53\u201378, 2013.\n\nJihun Ham and Daniel D. Lee. Grassmann discriminant analysis: a unifying view on subspace-based learning. In ICML, pp. 376\u2013383, 2008. URL https://doi.org/10.1145/1390156.1390204.\n\nKaren Hambardzumyan, Hrant Khachatrian, and Jonathan May. WARP: Word-level Adversarial ReProgramming. arXiv:2101.00121 [cs], December 2020. URL http://arxiv.org/abs/2101.00121. arXiv: 2101.00121.\n\nPengcheng He, Xiaodong Liu, Jianfeng Gao, and Weizhu Chen. Deberta: Decoding-enhanced bert with disentangled attention, 2021.\n\nNeil Houlsby, Andrei Giurgiu, Stanislaw Jastrzebski, Bruna Morrone, Quentin de Laroussilhe, Andrea Gesmundo, Mona Attariyan, and Sylvain Gelly. Parameter-Efficient Transfer Learning for NLP. arXiv:1902.00751 [cs, stat], June 2019. URL http://arxiv.org/abs/1902.00751.\n\nMax Jaderberg, Andrea Vedaldi, and Andrew Zisserman. Speeding up convolutional neural networks with low rank expansions. arXiv preprint arXiv:1405.3866, 2014.\n\nMikhail Khodak, Neil Tenenholtz, Lester Mackey, and Nicol\u00f2 Fusi. Initialization and regularization of factorized neural layers, 2021.\n\nDiederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization, 2017.\n\nDmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang, Maxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional computation and automatic sharding, 2020.\n\nBrian Lester, Rami Al-Rfou, and Noah Constant. The Power of Scale for Parameter-Efficient Prompt Tuning. arXiv:2104.08691 [cs], April 2021. URL http://arxiv.org/abs/2104.08691. arXiv: 2104.08691.\n\nChunyuan Li, Heerad Farkhoor, Rosanne Liu, and Jason Yosinski. Measuring the Intrinsic Dimension of Objective Landscapes. arXiv:1804.08838 [cs, stat], April 2018a. URL http://arxiv.org/abs/1804.08838. arXiv: 1804.08838.\n\nXiang Lisa Li and Percy Liang. Prefix-Tuning: Optimizing Continuous Prompts for Generation. arXiv:2101.00190 [cs], January 2021. URL http://arxiv.org/abs/2101.00190.\n\nYuanzhi Li and Yingyu Liang. Learning overparameterized neural networks via stochastic gradient descent on structured data. In Advances in Neural Information Processing Systems, 2018.\n\nYuanzhi Li, Yingyu Liang, and Andrej Risteski. Recovery guarantee of weighted low-rank approximation via alternating minimization. In International Conference on Machine Learning, pp. 2358\u20132367. PMLR, 2016.\n\nYuanzhi Li, Tengyu Ma, and Hongyang Zhang. Algorithmic regularization in over-parameterized matrix sensing and neural networks with quadratic activations. In Conference On Learning Theory, pp. 2\u201347. PMLR, 2018b.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfdbbf29-2a4b-45fb-badf-be8436b16ddb": {"__data__": {"id_": "dfdbbf29-2a4b-45fb-badf-be8436b16ddb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0749e919-af60-4d3b-8b3c-333a623117a3", "node_type": "4", "metadata": {}, "hash": "e49f8c1dfe1d4f9996858869422b900bc1efa500b53de06a0bf09247d1c1d72a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23e30986-dd80-4603-b33e-4993ca4674f3", "node_type": "1", "metadata": {}, "hash": "e75ca82b7ad9fb23556941b75a0c12acc7cd33dd5d500f49f78d262c8b5865af", "class_name": "RelatedNodeInfo"}}, "text": "arXiv:2101.00190 [cs], January 2021. URL http://arxiv.org/abs/2101.00190.\n\nYuanzhi Li and Yingyu Liang. Learning overparameterized neural networks via stochastic gradient descent on structured data. In Advances in Neural Information Processing Systems, 2018.\n\nYuanzhi Li, Yingyu Liang, and Andrej Risteski. Recovery guarantee of weighted low-rank approximation via alternating minimization. In International Conference on Machine Learning, pp. 2358\u20132367. PMLR, 2016.\n\nYuanzhi Li, Tengyu Ma, and Hongyang Zhang. Algorithmic regularization in over-parameterized matrix sensing and neural networks with quadratic activations. In Conference On Learning Theory, pp. 2\u201347. PMLR, 2018b.\n\nZhaojiang Lin, Andrea Madotto, and Pascale Fung. Exploring versatile generative language model via parameter-efficient transfer learning. In Findings of the Association for Computational Linguistics: EMNLP 2020, pp. 441\u2013459, Online, November 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.findings-emnlp.41. URL https://aclanthology.org/2020.findings-emnlp.41.", "mimetype": "text/plain", "start_char_idx": 2432, "end_char_idx": 3497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db0e6eef-20c6-4920-bc39-2d93d428b7a2": {"__data__": {"id_": "db0e6eef-20c6-4920-bc39-2d93d428b7a2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab5c9b84-0d38-4cbd-bf8e-62a83f09b1d1", "node_type": "4", "metadata": {}, "hash": "c4f1422a73f3c511df7117a5a04fce95247494466d1b873187e7a17708e98acb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0bada0cf-794a-40ca-8882-f94a563a2d65", "node_type": "1", "metadata": {}, "hash": "a7bc7b5f21911d462f67bdd612b7379ad858110d63c55881eba390c21d07dc6b", "class_name": "RelatedNodeInfo"}}, "text": "# References\n\nXiao Liu, Yanan Zheng, Zhengxiao Du, Ming Ding, Yujie Qian, Zhilin Yang, and Jie Tang. GPT Understands, Too. arXiv:2103.10385 [cs], March 2021. URL http://arxiv.org/abs/2103.10385. arXiv: 2103.10385.\n\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining approach, 2019.\n\nIlya Loshchilov and Frank Hutter. Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101, 2017.\n\nIlya Loshchilov and Frank Hutter. Decoupled weight decay regularization, 2019.\n\nRabeeh Karimi Mahabadi, James Henderson, and Sebastian Ruder. Compacter: Efficient low-rank hypercomplex adapter layers, 2021.\n\nLinyong Nan, Dragomir Radev, Rui Zhang, Amrit Rau, Abhinand Sivaprasad, Chiachun Hsieh, Xiangru Tang, Aadit Vyas, Neha Verma, Pranav Krishna, et al. Dart: Open-domain structured data record to text generation. arXiv preprint arXiv:2007.02871, 2020.\n\nJekaterina Novikova, Ond\u02c7rej Du\u02c7sek, and Verena Rieser. The e2e dataset: New challenges for end-to-end generation. arXiv preprint arXiv:1706.09254, 2017.\n\nSamet Oymak, Zalan Fabian, Mingchen Li, and Mahdi Soltanolkotabi. Generalization guarantees for neural networks via harnessing the low-rank structure of the jacobian. arXiv preprint arXiv:1906.05392, 2019.\n\nJonas Pfeiffer, Aishwarya Kamath, Andreas R\u00a8uckl\u00b4e, Kyunghyun Cho, and Iryna Gurevych. Adapter-fusion: Non-destructive task composition for transfer learning, 2021.\n\nDaniel Povey, Gaofeng Cheng, Yiming Wang, Ke Li, Hainan Xu, Mahsa Yarmohammadi, and Sanjeev Khudanpur. Semi-orthogonal low-rank matrix factorization for deep neural networks. In Interspeech, pp. 3743\u20133747, 2018.\n\nAlec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving Language Understanding by Generative Pre-Training. pp. 12, a.\n\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language Models are Unsupervised Multitask Learners. pp. 24, b.\n\nPranav Rajpurkar, Robin Jia, and Percy Liang. Know what you don\u2019t know: Unanswerable questions for squad. CoRR, abs/1806.03822, 2018. URL http://arxiv.org/abs/1806.03822.\n\nSylvestre-Alvise Rebuffi, Hakan Bilen, and Andrea Vedaldi. Learning multiple visual domains with residual adapters. arXiv:1705.08045 [cs, stat], November 2017. URL http://arxiv.org/abs/1705.08045. arXiv: 1705.08045.\n\nAndreas R\u00a8uckl\u00b4e, Gregor Geigle, Max Glockner, Tilman Beck, Jonas Pfeiffer, Nils Reimers, and Iryna Gurevych. Adapterdrop: On the efficiency of adapters in transformers, 2020.\n\nTara N Sainath, Brian Kingsbury, Vikas Sindhwani, Ebru Arisoy, and Bhuvana Ramabhadran. Low-rank matrix factorization for deep neural network training with high-dimensional output targets. In 2013 IEEE international conference on acoustics, speech and signal processing, pp. 6655\u20136659. IEEE, 2013.\n\nMohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bada0cf-794a-40ca-8882-f94a563a2d65": {"__data__": {"id_": "0bada0cf-794a-40ca-8882-f94a563a2d65", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab5c9b84-0d38-4cbd-bf8e-62a83f09b1d1", "node_type": "4", "metadata": {}, "hash": "c4f1422a73f3c511df7117a5a04fce95247494466d1b873187e7a17708e98acb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db0e6eef-20c6-4920-bc39-2d93d428b7a2", "node_type": "1", "metadata": {}, "hash": "0429d99943f9d6d8c094800a690026cdc927533d81075ff36f8499a93d307c9d", "class_name": "RelatedNodeInfo"}}, "text": "arXiv: 1705.08045.\n\nAndreas R\u00a8uckl\u00b4e, Gregor Geigle, Max Glockner, Tilman Beck, Jonas Pfeiffer, Nils Reimers, and Iryna Gurevych. Adapterdrop: On the efficiency of adapters in transformers, 2020.\n\nTara N Sainath, Brian Kingsbury, Vikas Sindhwani, Ebru Arisoy, and Bhuvana Ramabhadran. Low-rank matrix factorization for deep neural network training with high-dimensional output targets. In 2013 IEEE international conference on acoustics, speech and signal processing, pp. 6655\u20136659. IEEE, 2013.\n\nMohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro. Megatron-lm: Training multi-billion parameter language models using model parallelism, 2020.\n\nRichard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Ng, and Christopher Potts. Recursive deep models for semantic compositionality over a sentiment treebank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pp. 1631\u20131642, Seattle, Washington, USA, October 2013. Association for Computational Linguistics. URL https://aclanthology.org/D13-1170.", "mimetype": "text/plain", "start_char_idx": 2387, "end_char_idx": 3496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ab26c8f-3271-4b59-acf8-c902d20351f1": {"__data__": {"id_": "2ab26c8f-3271-4b59-acf8-c902d20351f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fdd9df16-251a-4233-8269-5b21371850ae", "node_type": "4", "metadata": {}, "hash": "8d02807ac3dc858dcf07e96b21aa722b4b369f4a50dc5374b42535985e366811", "class_name": "RelatedNodeInfo"}}, "text": "# A LARGE LANGUAGE MODELS STILL NEED PARAMETER UPDATES\n\nFew-shot learning, or prompt engineering, is very advantageous when we only have a handful of training samples. However, in practice, we can often afford to curate a few thousand or more training examples for performance-sensitive applications. As shown in Table 8, fine-tuning improves the model performance drastically compared to few-shot learning on datasets large and small. We take the GPT-3 few-shot result on RTE from the GPT-3 paper (Brown et al., 2020). For MNLI-matched, we use two demonstrations per class and six in-context examples in total.\n\n|Reference|Details|\n|---|---|\n|Ashish Vaswani et al. (2017)|Attention is all you need. In Proceedings of the 31st International Conference on Neural Information Processing Systems, pp. 6000\u20136010.|\n|Alex Wang et al. (2019)|Glue: A multi-task benchmark and analysis platform for natural language understanding.|\n|Alex Wang et al. (2020)|Superglue: A stickier benchmark for general-purpose language understanding systems.|\n|Alex Warstadt et al. (2018)|Neural network acceptability judgments. arXiv preprint arXiv:1805.12471.|\n|Adina Williams et al. (2018)|A broad-coverage challenge corpus for sentence understanding through inference. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pp. 1112\u20131122, New Orleans, Louisiana, June 2018. doi: 10.18653/v1/N18-1101. URL: https://www.aclweb.org/anthology/N18-1101.|\n|Thomas Wolf et al. (2020)|Transformers: State-of-the-art natural language processing. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations, pp. 38\u201345, Online, October 2020. URL: https://www.aclweb.org/anthology/2020.emnlp-demos.6.|\n|Greg Yang and Edward J. Hu (2021)|Feature Learning in Infinite-Width Neural Networks. arXiv:2011.14522 [cond-mat]. URL: http://arxiv.org/abs/2011.14522.|\n|Elad Ben Zaken et al. (2021)|Bitfit: Simple parameter-efficient fine-tuning for transformer-based masked language-models.|\n|Yu Zhang et al. (2014)|Extracting deep neural network bottleneck features using low-rank matrix factorization. In 2014 IEEE international conference on acoustics, speech and signal processing (ICASSP), pp. 185\u2013189. IEEE.|\n|Yong Zhao et al. (2016)|Low-rank plus diagonal adaptation for deep neural networks. In 2016 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), pp. 5005\u20135009. IEEE.|\n|Victor Zhong et al. (2017)|Seq2sql: Generating structured queries from natural language using reinforcement learning. CoRR, abs/1709.00103. URL: http://arxiv.org/abs/1709.00103.|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2715, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5cd669f2-b142-4f10-a28e-e85bf4249bd4": {"__data__": {"id_": "5cd669f2-b142-4f10-a28e-e85bf4249bd4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d6278ccd-0a3b-4828-be53-7a715d1aa418", "node_type": "4", "metadata": {}, "hash": "1fa162292cb36c68142847ed8a0de8094212b13aba7abeb3a16213bbc7a598dd", "class_name": "RelatedNodeInfo"}}, "text": "# Method\n\n| |MNLI-m (Val. Acc./%)|RTE (Val. Acc./%)|\n|---|---|---|\n|GPT-3 Few-Shot|40.6|69.0|\n|GPT-3 Fine-Tuned|89.5|85.4|\n\nTable 8: Fine-tuning significantly outperforms few-shot learning on GPT-3 (Brown et al., 2020).\n\n# B INFERENCE LATENCY INTRODUCED BY ADAPTER LAYERS\n\nAdapter layers are external modules added to a pre-trained model in a sequential manner, whereas our proposal, LoRA, can be seen as external modules added in a parallel manner. Consequently, adapter layers must be computed in addition to the base model, inevitably introducing additional latency. While as pointed out in R\u00fcckl\u00e9 et al. (2020), the latency introduced by adapter layers can be mitigated when the model batch size and/or sequence length is large enough to fully utilize the hardware parallelism. We confirm their observation with a similar latency study on GPT-2 medium and point out that there are scenarios, notably online inference where the batch size is small, where the added latency can be significant.\n\nWe measure the latency of a single forward pass on an NVIDIA Quadro RTX8000 by averaging over 100 trials. We vary the input batch size, sequence length, and the adapter bottleneck dimension r. We test two adapter designs: the original one by Houlsby et al. (2019), which we call AdapterH, and a recent, more efficient variant by Lin et al. (2020), which we call AdapterL. See Section 5.1 for more details on the designs. We plot the slow-down in percentage compared to the no-adapter baseline in Figure 5.\n\n# Seq Len = 128\n\n# Seq Len = 256\n\n# Seq Len = 512\n\nFigure 5: Percentage slow-down of inference latency compared to the no-adapter (r = 0) baseline. The top row shows the result for AdapterH and the bottom row AdapterL. Larger batch size and sequence length help to mitigate the latency, but the slow-down can be as high as over 30% in an online, short-sequence-length scenario. We tweak the colormap for better visibility.\n\n# C DATASET DETAILS\n\nGLUE Benchmark is a wide-ranging collection of natural language understanding tasks. It includes MNLI (inference, Williams et al. (2018)), SST-2 (sentiment analysis, Socher et al. (2013)), MRPC (paraphrase detection, Dolan & Brockett (2005)), CoLA (linguistic acceptability, Warstadt et al. (2018)), QNLI (inference, Rajpurkar et al. (2018)), QQP (question-answering), RTE (inference).\n\n8", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eda22710-26e2-44dc-83b1-83a7d842c8a5": {"__data__": {"id_": "eda22710-26e2-44dc-83b1-83a7d842c8a5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c276e4dd-7eb0-47ab-9fe1-01c8d3880ea0", "node_type": "4", "metadata": {}, "hash": "2cba3219eb9f2c4f83acadb3bc4957d8f6690f1eab027d9d20224fc1a478ff66", "class_name": "RelatedNodeInfo"}}, "text": "# D     HYPERPARAMETERS USED IN EXPERIMENTS\n\n# D.1     ROBERTA\n\nWe train using AdamW with a linear learning rate decay schedule. We sweep learning rate, number of training epochs, and batch size for LoRA. Following Liu et al. (2019), we initialize the LoRA modules to our best MNLI checkpoint when adapting to MRPC, RTE, and STS-B, instead of the usual initialization; the pre-trained model stays frozen for all tasks. We report the median over 5 random seeds; the result for each run is taken from the best epoch. For a fair comparison with the setup in Houlsby et al. (2019) and Pfeiffer et al. (2021), we restrict the model sequence length to 128 and used a fixed batch size for all tasks. Importantly, we start with the pre-trained RoBERTa large model when adapting to MRPC, RTE, and STS-B, instead of a model already adapted to MNLI. The runs with this restricted setup are marked with \u2020. See the hyperparameters used in our runs in Table 9.\n\n# D.2     DEBERTA\n\nWe again train using AdamW with a linear learning rate decay schedule. Following He et al. (2021), we tune learning rate, dropout probability, warm-up steps, and batch size. We use the same model sequence length used by (He et al., 2021) to keep our comparison fair. Following He et al. (2021), we initialize the LoRA modules to our best MNLI checkpoint when adapting to MRPC, RTE, and STS-B, instead of the usual initialization; the pre-trained model stays frozen for all tasks. We report the median over 5 random seeds; the result for each run is taken from the best epoch. See the hyperparameters used in our runs in Table 10.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d689815-fac1-464d-97e5-97b35ede1db8": {"__data__": {"id_": "7d689815-fac1-464d-97e5-97b35ede1db8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4429fcb9-241a-44ce-bbbb-28be8a228e9c", "node_type": "4", "metadata": {}, "hash": "3c3fbaed5c0bf02f710557e8432698c6406afc08a909d0b205c1a0f90d8ea953", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e30d1f37-1a28-4e43-ad3d-c88a664faa86", "node_type": "1", "metadata": {}, "hash": "63d2699393c6a015a3ffdfb16f33eaa9cc7c09dfa8ebf6ffdc0bdd49bddfdb3c", "class_name": "RelatedNodeInfo"}}, "text": "# Table 9: The hyperparameters we used for RoBERTa on the GLUE benchmark.\n\n|Method|Dataset|MNLI|SST-2|MRPC|CoLA|QNLI|QQP|RTE|STS-B| | | |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|RoBERTa base|Optimizer| | | |AdamW| | | | | | | |\n| |Warmup Ratio| | | |0.06| | | | | | | |\n|LoRA|LR Schedule| | | |Linear| | | | | | | |\n| |Batch Size|16|16|16|32|32|16|32|16| | | |\n|RoBERTa large|# Epochs|30|60|30|80|25|25|80|40| | | |\n| |Learning Rate|5E-04|5E-04|4E-04|4E-04|4E-04|5E-04|5E-04|4E-04| | | |\n|RoBERTa large|LoRA Config.| | | |rq = rv = 8| | | | | | | |\n| |LoRA \u03b1| | | |16| | | | | | | |\n| |Max Seq. Len.|128|128|512|128|512|512|512|512| | | |\n| |Batch Size|4| | | | | | | | | | |\n|LoRA\u2020|# Epochs|10|10|20|20|10|20|20|30| | | |\n| |Learning Rate|3E-04|4E-04|3E-04|2E-04|2E-04|3E-04|4E-04|2E-04| | | |\n|RoBERTa largeAdptP (3M)\u2020|# Epochs|10|20|20|20|10|20|20|20| | | |\n| |Learning Rate|3E-05|3E-05|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04| | | |\n| |Bottleneck r| | | |64| | | | | | | |\n| |Max Seq. Len.|128| | | | | | | | | | |\n| |Batch Size| | |32| | | | | | | | |\n|RoBERTa large AdptP (0.8M)\u2020|# Epochs|5|20|20|20|10|20|20|20| | | |\n| |Learning Rate|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04| | | |\n| |Bottleneck r| | | |16| | | | | | | |\n| |Max Seq. Len.|128| | | | | | | | | | |\n| |Batch Size| | |32| | | | | | | | |\n|RoBERTa largeAdptH (6M)\u2020|# Epochs|10|5|10|10|5|20|20|10| | | |\n| |Learning Rate|3E-05| |3E-04|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04| | |\n| |Bottleneck r| | | |64| | | | | | | |\n| |Max Seq. Len.|128| | | | | | | | | | |\n| |Batch Size| | |32| | | | | | | | |\n|RoBERTa large AdptH (0.8M)\u2020|# Epochs| | | |10|5|10|10|5|20|20|10|\n| |Learning Rate|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04|3E-04| | | |\n| |Bottleneck r| | | |8| | | | | | | |\n| |Max Seq. Len.|128| | | | | | | | | | |\n\n# D.3 GPT-2\n\nWe train all of our GPT-2 models using AdamW (Loshchilov & Hutter, 2017) with a linear learning rate schedule for 5 epochs. We use the batch size, learning rate, and beam search beam size described in Li & Liang (2021).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e30d1f37-1a28-4e43-ad3d-c88a664faa86": {"__data__": {"id_": "e30d1f37-1a28-4e43-ad3d-c88a664faa86", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4429fcb9-241a-44ce-bbbb-28be8a228e9c", "node_type": "4", "metadata": {}, "hash": "3c3fbaed5c0bf02f710557e8432698c6406afc08a909d0b205c1a0f90d8ea953", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d689815-fac1-464d-97e5-97b35ede1db8", "node_type": "1", "metadata": {}, "hash": "776bc26180beac1d5565122c13be264d6291da5fec37ed2ef132b5719e7129e7", "class_name": "RelatedNodeInfo"}}, "text": "Len.|128| | | | | | | | | | |\n\n# D.3 GPT-2\n\nWe train all of our GPT-2 models using AdamW (Loshchilov & Hutter, 2017) with a linear learning rate schedule for 5 epochs. We use the batch size, learning rate, and beam search beam size described in Li & Liang (2021). Accordingly, we also tune the above hyperparameters for LoRA. We report the mean over 3 random seeds; the result for each run is taken from the best epoch. The hyperparameters used for LoRA in GPT-2 are listed in Table 11. For those used for other baselines, see Li & Liang (2021).\n\n# D.4 GPT-3\n\nFor all GPT-3 experiments, we train using AdamW (Loshchilov & Hutter, 2017) for 2 epochs with a batch size of 128 samples and a weight decay factor of 0.1. We use a sequence length of 384 for", "mimetype": "text/plain", "start_char_idx": 1774, "end_char_idx": 2525, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a76e958a-bfcf-4b5f-9454-7d233c8c7d28": {"__data__": {"id_": "a76e958a-bfcf-4b5f-9454-7d233c8c7d28", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de6ba9c8-ec35-456c-a781-e8ecc34e7bec", "node_type": "4", "metadata": {}, "hash": "7927cac5166dfe58c016c346eeec84baac0acacf2af8ac8d825efb0a685da18a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61b6cae7-3a63-418f-837f-ac8a8815005d", "node_type": "1", "metadata": {}, "hash": "6aaca95c81d5aefc82f1fac2d4dc00602e4df9a67da3560c1fe580be2a70bd56", "class_name": "RelatedNodeInfo"}}, "text": "# Method\n\n|Dataset|MNLI|SST-2|MRPC|CoLA|QNLI|QQP|RTE|STS-B| |\n|---|---|---|---|---|---|---|---|---|---|\n|Optimizer|AdamW|AdamW|AdamW|AdamW|AdamW|AdamW|AdamW|AdamW| | | | | | | | |\n|Warmup Ratio|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1| | | | | | | | |\n|LR Schedule|Linear|Linear|Linear|Linear|Linear|Linear|Linear|Linear| | | | | | | | |\n|Batch Size|8|8|32|4|6|8|4|4| |\n|DeBERTa XXL|# Epochs|5|16|30|10|8|11|11|10|\n|LoRA|Learning Rate|1E-04|6E-05|2E-04|1E-04|1E-04|1E-04|2E-04|2E-04|\n| |Weight Decay|0|0.01|0.01|0|0.01|0.01|0.01|0.1|\n| |CLS Dropout|0.15|0|0|0.1|0.1|0.2|0.2|0.2|\n| |LoRA Config.|rq = rv = 8|rq = rv = 8|rq = rv = 8|rq = rv = 8|rq = rv = 8|rq = rv = 8|rq = rv = 8| | | | | | | |\n| |LoRA \u03b1|8|8|8|8|8|8|8| | | | | | | |\n| |Max Seq. Len.|256|128|128|64|512|320|320|128|\n\nTable 10: The hyperparameters for DeBERTa XXL on tasks included in the GLUE benchmark.\n\n# Dataset\n\n| |E2E|WebNLG|DART|\n|---|---|---|---|\n|Optimizer|AdamW|AdamW|AdamW|\n|Weight Decay|0.01|0.01|0.0|\n|Dropout Prob|0.1|0.1|0.0|\n|Batch Size|8|8|8|\n|# Epoch|5|5|5|\n|Warmup Steps|500|500|500|\n|Learning Rate Schedule|Linear|Linear|Linear|\n|Label Smooth|0.1|0.1|0.0|\n|Learning Rate|0.0002|0.0002|0.0002|\n|Adaptation|rq = rv = 4|rq = rv = 4|rq = rv = 4|\n|LoRA \u03b1|32|32|32|\n|Inference| | | |\n|Beam Size|10|10|10|\n|Length Penalty|0.9|0.8|0.8|\n|no repeat ngram size| | | |\n\nTable 11: The hyperparameters for GPT-2 LoRA on E2E, WebNLG and DART.\n\nWikiSQL (Zhong et al., 2017), 768 for MNLI (Williams et al., 2018), and 2048 for SAMSum (Gliwa et al., 2019). We tune learning rate for all method-dataset combinations. See Section D.4 for more details on the hyperparameters used. For prefix-embedding tuning, we find the optimal lp and li to be 256 and 8, respectively, totalling 3.2M trainable parameters. We use lp = 8 and li = 8 for prefix-layer tuning with 20.2M trainable parameters to obtain the overall best performance. We present two parameter budgets for LoRA: 4.7M (rq = rv = 1 or rv = 2) and 37.7M (rq = rv = 8 or rq = rk = rv = ro = 2). We report the best validation performance from each run. The training hyperparameters used in our GPT-3 experiments are listed in Table 12.\n\n# E COMBINING LORA WITH PREFIX TUNING\n\nLoRA can be naturally combined with existing prefix-based approaches. In this section, we evaluate two combinations of LoRA and variants of prefix-tuning on WikiSQL and MNLI.\n\nLoRA+PrefixEmbed (LoRA+PE) combines LoRA with prefix-embedding tuning, where we insert lp + li special tokens whose embeddings are treated as trainable parameters.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2525, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61b6cae7-3a63-418f-837f-ac8a8815005d": {"__data__": {"id_": "61b6cae7-3a63-418f-837f-ac8a8815005d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de6ba9c8-ec35-456c-a781-e8ecc34e7bec", "node_type": "4", "metadata": {}, "hash": "7927cac5166dfe58c016c346eeec84baac0acacf2af8ac8d825efb0a685da18a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a76e958a-bfcf-4b5f-9454-7d233c8c7d28", "node_type": "1", "metadata": {}, "hash": "157afc320a23c8ef0428896138c1e20581c840434919dbc4c8b405ff974ea0cf", "class_name": "RelatedNodeInfo"}}, "text": "We present two parameter budgets for LoRA: 4.7M (rq = rv = 1 or rv = 2) and 37.7M (rq = rv = 8 or rq = rk = rv = ro = 2). We report the best validation performance from each run. The training hyperparameters used in our GPT-3 experiments are listed in Table 12.\n\n# E COMBINING LORA WITH PREFIX TUNING\n\nLoRA can be naturally combined with existing prefix-based approaches. In this section, we evaluate two combinations of LoRA and variants of prefix-tuning on WikiSQL and MNLI.\n\nLoRA+PrefixEmbed (LoRA+PE) combines LoRA with prefix-embedding tuning, where we insert lp + li special tokens whose embeddings are treated as trainable parameters. For more on prefix-embedding tuning, see Section 5.1.\n\nLoRA+PrefixLayer (LoRA+PL) combines LoRA with prefix-layer tuning. We also insert lp + li special tokens; however, instead of letting the hidden representations of these tokens evolve naturally.", "mimetype": "text/plain", "start_char_idx": 1884, "end_char_idx": 2775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24554c59-3d68-49d1-9d98-9de7d8da5315": {"__data__": {"id_": "24554c59-3d68-49d1-9d98-9de7d8da5315", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c57bff8-dbe3-4a5c-b732-d9d5217d4aab", "node_type": "4", "metadata": {}, "hash": "5c84d4a6bc155dde2a41552f7347960c40a875bbb095ae5f21048a67b54ad305", "class_name": "RelatedNodeInfo"}}, "text": "# Hyperparameters\n\n|Hyperparameters|Fine-Tune|PreEmbed|PreLayer|BitFit|AdapterH|LoRA|\n|---|---|---|---|---|---|---|\n|Optimizer|AdamW|AdamW|AdamW|AdamW|AdamW|AdamW|\n|Batch Size|128|128|128|128|128|128|\n|# Epoch|2|2|2|2|2|2|\n|Warmup Tokens|250,000|250,000|250,000|250,000|250,000|250,000|\n|LR Schedule|Linear|Linear|Linear|Linear|Linear|Linear|\n|Learning Rate|5.00E-06|5.00E-04|1.00E-04|1.6E-03|1.00E-04|2.00E-04|\n\nTable 12: The training hyperparameters used for different GPT-3 adaption methods. We use the same hyperparameters for all datasets after tuning learning rate.\n\nRally, we replace them after every Transformer block with an input agnostic vector. Thus, both the embeddings and subsequent Transformer block activations are treated as trainable parameters. For more on prefix-layer tuning, see Section 5.1.\n\nIn Table 15, we show the evaluation results of LoRA+PE and LoRA+PL on WikiSQL and MultiNLI. First of all, LoRA+PE significantly outperforms both LoRA and prefix-embedding tuning on WikiSQL, which indicates that LoRA is somewhat orthogonal to prefix-embedding tuning. On MultiNLI, the combination of LoRA+PE doesn\u2019t perform better than LoRA, possibly because LoRA on its own already achieves performance comparable to the human baseline. Secondly, we notice that LoRA+PL performs slightly worse than LoRA even with more trainable parameters. We attribute this to the fact that prefix-layer tuning is very sensitive to the choice of learning rate and thus makes the optimization of LoRA weights more difficult in LoRA+PL.\n\n# F ADDITIONAL EMPIRICAL EXPERIMENTS\n\n# F.1 ADDITIONAL EXPERIMENTS ON GPT-2\n\nWe also repeat our experiment on DART (Nan et al., 2020) and WebNLG (Gardent et al., 2017) following the setup of Li & Liang (2021). The result is shown in Table 13. Similar to our result on E2E NLG Challenge, reported in Section 5, LoRA performs better than or at least on-par with prefix-based approaches given the same number of trainable parameters.\n\n|Method|# Trainable Parameters|DART BLEU\u2191|DART MET\u2191|DART TER\u2193|\n|---|---|---|---|---|\n|GPT-2 Medium| | | | |\n|Fine-Tune|354M|46.2|0.39|0.46|\n|AdapterLL|0.37M|42.4|0.36|0.48|\n|Adapter|11M|45.2|0.38|0.46|\n|FTTop2|24M|41.0|0.34|0.56|\n|PrefLayer|0.35M|46.4|0.38|0.46|\n|LoRA|0.35M|47.1\u00b1.2|0.39|0.46|\n|GPT-2 Large| | | | |\n|Fine-Tune|774M|47.0|0.39|0.46|\n|AdapterL|0.88M|45.7\u00b1.1|0.38|0.46|\n|AdapterL|23M|47.1\u00b1.1|0.39|0.45|\n|PrefLayer|0.77M|46.7|0.38|0.45|\n|LoRA|0.77M|47.5\u00b1.1|0.39|0.45|\n\nTable 13: GPT-2 with different adaptation methods on DART. The variances of MET and TER are less than 0.01 for all adaption approaches.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2585, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1752ff94-e54c-4a26-8267-5431b3a66776": {"__data__": {"id_": "1752ff94-e54c-4a26-8267-5431b3a66776", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1239de6d-e7d8-4883-be0f-190f81e639b1", "node_type": "4", "metadata": {}, "hash": "4f69b086aa0701eaaa1fe7947d096c725753a3a727f5b3a6c11a1e7c3de4a9a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9053eeb-861a-457b-aba8-2cbb92f86040", "node_type": "1", "metadata": {}, "hash": "2ec9ece8afc5c5d8abddd879efa40e88ac1741063503f3f03e2f860b6cff1248", "class_name": "RelatedNodeInfo"}}, "text": "# Method\n\n# WebNLG\n\n|Method|BLEU\u2191|BLEU\u2191|BLEU\u2191|MET\u2191|MET\u2191|MET\u2191|TER\u2193|TER\u2193|TER\u2193| | | | | | | |\n|---|---|---|---|---|---|---|---|---|---|---|\n| |U|S|A|U|S|A|U|S|A| |\n|GPT-2 Medium|27.7|64.2|46.5|.30|.45|.38|.76|.33|.53| |\n|Fine-Tune (354M)|45.1|54.5|50.2|.36|.39|.38|.46|.40|.43| |\n|AdapterL (0.37M)|48.3|60.4|54.9|.38|.43|.41|.45|.35|.39| |\n|FTTop2 (24M)|18.9|53.6|36.0|.23|.38|.31|.99|.49|.72| |\n|Prefix (0.35M)|45.6|62.9|55.1|.38|.44|.41|.49|.35|.40| |\n|LoRA (0.35M)|46.7\u00b1.4|62.1\u00b1.2|55.3\u00b1.2|.38|.44|.41|.46|.33|.39| |\n|Fine-Tune (774M)|43.1|65.3|55.5|GPT-2 Large|.38|.46|.42|.53|.33|.42|\n|AdapterL (0.88M)|49.8\u00b1.0|61.1\u00b1.0|56.0\u00b1.0|.38|.43|.41|.44|.35|.39| |\n|AdapterL (23M)|49.2\u00b1.1|64.7\u00b1.2|57.7\u00b1.1|.39|.46|.43|.46|.33|.39| |\n|Prefix (0.77M)|47.7|63.4|56.3|.39|.45|.42|.48|.34|.40| |\n|LoRA (0.77M)|48.4\u00b1.3|64.0\u00b1.3|57.0\u00b1.1|.39|.45|.42|.45|.32|.38| |\n\nTable 14: GPT-2 with different adaptation methods on WebNLG. The variances of MET and TER are less than 0.01 for all the experiments we ran. \u201cU\u201d indicates unseen categories, \u201cS\u201d indicates seen categories, and \u201cA\u201d indicates all categories in the test set of WebNLG.\n\n# F.2 ADDITIONAL EXPERIMENTS ON GPT-3\n\nWe present additional runs on GPT-3 with different adaptation methods in Table 15. The focus is on identifying the trade-off between performance and the number of trainable parameters.\n\n# F.3 LOW-DATA REGIME\n\nTo evaluate the performance of different adaptation approaches in the low-data regime, we randomly sample 100, 1k and 10k training examples from the full training set of MNLI to form the low-data MNLI-n tasks. In Table 16, we show the performance of different adaptation approaches on MNLI-n. To our surprise, PrefixEmbed and PrefixLayer perform very poorly on MNLI-100 dataset, with PrefixEmbed performing only slightly better than random chance (37.6% vs. 33.3%). PrefixLayer performs better than PrefixEmbed but is still significantly worse than Fine-Tune or LoRA on MNLI-100. The gap between prefix-based approaches and LoRA/Fine-tuning becomes smaller as we increase the number of training examples, which might suggest that prefix-based approaches are not suitable for low-data tasks in GPT-3. LoRA achieves better performance than fine-tuning on both MNLI-100 and MNLI-Full, and comparable results on MNLI-1k and MNLI-10K considering the (\u00b10.3) variance due to random seeds. The training hyperparameters of different adaptation approaches on MNLI-n are reported in Table 17. We use a smaller learning rate for PrefixLayer on the MNLI-100 set, as the training loss does not decrease with a larger learning rate.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9053eeb-861a-457b-aba8-2cbb92f86040": {"__data__": {"id_": "d9053eeb-861a-457b-aba8-2cbb92f86040", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1239de6d-e7d8-4883-be0f-190f81e639b1", "node_type": "4", "metadata": {}, "hash": "4f69b086aa0701eaaa1fe7947d096c725753a3a727f5b3a6c11a1e7c3de4a9a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1752ff94-e54c-4a26-8267-5431b3a66776", "node_type": "1", "metadata": {}, "hash": "6ad968ffead6e7dd19f6190a8f7da0d3402090de8a4cbe76f4bf9db55db44ea6", "class_name": "RelatedNodeInfo"}}, "text": "33.3%). PrefixLayer performs better than PrefixEmbed but is still significantly worse than Fine-Tune or LoRA on MNLI-100. The gap between prefix-based approaches and LoRA/Fine-tuning becomes smaller as we increase the number of training examples, which might suggest that prefix-based approaches are not suitable for low-data tasks in GPT-3. LoRA achieves better performance than fine-tuning on both MNLI-100 and MNLI-Full, and comparable results on MNLI-1k and MNLI-10K considering the (\u00b10.3) variance due to random seeds. The training hyperparameters of different adaptation approaches on MNLI-n are reported in Table 17. We use a smaller learning rate for PrefixLayer on the MNLI-100 set, as the training loss does not decrease with a larger learning rate.\n\n# G MEASURING SIMILARITY BETWEEN SUBSPACES\n\nIn this paper we use the measure \u03c6(A, B, i, j) = \u03c8(U A i, U B j) = \u2016U A i>U B \u20162F min{i,j} to measure the subspace similarity between two column orthonormal matrices U Ai \u2208 Rd\u00d7i and U Bj \u2208 Rd\u00d7j, obtained by taking columns of the left singular matrices of A and B. We point out that this similarity is simply a reverse of the standard Projection Metric that measures distance between subspaces Ham & Lee (2008).", "mimetype": "text/plain", "start_char_idx": 1818, "end_char_idx": 3033, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17b6a9a2-19d7-4346-accd-3959ddca986f": {"__data__": {"id_": "17b6a9a2-19d7-4346-accd-3959ddca986f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b56ed615-ceeb-4964-bc9e-bb355b4355a4", "node_type": "4", "metadata": {}, "hash": "cf6ead36d44806d9830ee503ac3909459b1371fa4eebb7c9f5161a7db7f57e22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a38fc42b-7c0f-4ecd-978e-6e95b955bc6a", "node_type": "1", "metadata": {}, "hash": "f82795d07466fc6acffefde58102ac77f1ad88d9d33ea3b21c8088e56e8e7107", "class_name": "RelatedNodeInfo"}}, "text": "# Hyperparameter Analysis of Different Adaptation Approaches\n\n# Table 15: Hyperparameter analysis of different adaptation approaches on WikiSQL and MNLI.\n\n|Method|Hyperparameters|# Trainable Parameters|WikiSQL|MNLI-m|\n|---|---|---|---|---|\n|Fine-Tune|-|175B|73.8|89.5|\n| |lp = 32, li = 8|0.4 M|55.9|84.9|\n| |lp = 64, li = 8|0.9 M|58.7|88.1|\n|PrefixEmbed|lp = 128, li = 8|1.7 M|60.6|88.0|\n| |lp = 256, li = 8|3.2 M|63.1|88.6|\n| |lp = 512, li = 8|6.4 M|55.9|85.8|\n| |lp = 2, li = 2|5.1 M|68.5|89.2|\n| |lp = 8, li = 0|10.1 M|69.8|88.2|\n|PrefixLayer|lp = 8, li = 8|20.2 M|70.1|89.5|\n| |lp = 32, li = 4|44.1 M|66.4|89.6|\n| |lp = 64, li = 0|76.1 M|64.9|87.9|\n| |r = 1|7.1 M|71.9|89.8|\n| |r = 4|21.2 M|73.2|91.0|\n|AdapterH|r = 8|40.1 M|73.2|91.5|\n| |r = 16|77.9 M|73.2|91.5|\n| |r = 64|304.4 M|72.6|91.5|\n| |rv = 2|4.7 M|73.4|91.7|\n| |rq = rv = 1|4.7 M|73.4|91.3|\n|LoRA|rq = rv = 2|9.4 M|73.3|91.4|\n| |rq = rk = rv = ro = 1|9.4 M|74.1|91.2|\n| |rq = rv = 4|18.8 M|73.7|91.3|\n| |rq = rk = rv = ro = 2|18.8 M|73.7|91.7|\n| |rq = rv = 8|37.7 M|73.8|91.6|\n| |rq = rk = rv = ro = 4|37.7 M|74.0|91.7|\n| |rq = rv = 64|301.9 M|73.6|91.4|\n| |rq = rk = rv = ro = 64|603.8 M|73.9|91.4|\n| |rq = rv = 8, lp = 8, li = 4|37.8 M|75.0|91.4|\n|LoRA+PE|rq = rv = 32, lp = 8, li = 4|151.1 M|75.9|91.1|\n| |rq = rv = 64, lp = 8, li = 4|302.1 M|76.2|91.3|\n|LoRA+PL|rq = rv = 8, lp = 8, li = 4|52.8 M|72.9|90.2|\n\n# Table 16: Validation accuracy of different methods on subsets of MNLI using GPT-3 175B.\n\n|Method|MNLI(m)-100|MNLI(m)-1k|MNLI(m)-10k|MNLI(m)-392K|\n|---|---|---|---|---|\n|GPT-3 (Fine-Tune)|60.2|85.8|88.9|89.5|\n|GPT-3 (PrefixEmbed)|37.6|75.2|79.5|88.6|\n|GPT-3 (PrefixLayer)|48.3|82.5|85.9|89.6|\n|GPT-3 (LoRA)|63.8|85.6|89.2|91.7|\n\n# Projection Metric\n\nTo be concrete, let the singular values of U A i>U B to be \u03c31, \u03c32, \u00b7 \u00b7 \u00b7 , \u03c3p where p = min{i, j}.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a38fc42b-7c0f-4ecd-978e-6e95b955bc6a": {"__data__": {"id_": "a38fc42b-7c0f-4ecd-978e-6e95b955bc6a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b56ed615-ceeb-4964-bc9e-bb355b4355a4", "node_type": "4", "metadata": {}, "hash": "cf6ead36d44806d9830ee503ac3909459b1371fa4eebb7c9f5161a7db7f57e22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17b6a9a2-19d7-4346-accd-3959ddca986f", "node_type": "1", "metadata": {}, "hash": "93d897ceb1935907b516c7e1d4a07063e9b0c49a7e4ba0d20d864f45be7e757e", "class_name": "RelatedNodeInfo"}}, "text": "|Method|MNLI(m)-100|MNLI(m)-1k|MNLI(m)-10k|MNLI(m)-392K|\n|---|---|---|---|---|\n|GPT-3 (Fine-Tune)|60.2|85.8|88.9|89.5|\n|GPT-3 (PrefixEmbed)|37.6|75.2|79.5|88.6|\n|GPT-3 (PrefixLayer)|48.3|82.5|85.9|89.6|\n|GPT-3 (LoRA)|63.8|85.6|89.2|91.7|\n\n# Projection Metric\n\nTo be concrete, let the singular values of U A i>U B to be \u03c31, \u03c32, \u00b7 \u00b7 \u00b7 , \u03c3p where p = min{i, j}. We know that the Projection Metric Ham & Lee (2008) is defined as:\n\nd(U Ai, U B) = \u221ap - \u2211\u03c3i\u00b2, i=1 to p, where d \u2208 [0, \u221ap]", "mimetype": "text/plain", "start_char_idx": 1469, "end_char_idx": 1949, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d1149a8-b5a5-4e58-9e39-584d46a7ef59": {"__data__": {"id_": "0d1149a8-b5a5-4e58-9e39-584d46a7ef59", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f5b49194-ea72-4320-91dc-edc64de669a3", "node_type": "4", "metadata": {}, "hash": "915a8525568c07096ce9701c7dfa85d0c4d1b3f6d2042e6a5ace4b65159b8761", "class_name": "RelatedNodeInfo"}}, "text": "# Hyperparameters\n\n|Adaptation| |MNLI-100|MNLI-1k|MNLI-10K|MNLI-392K| |\n|---|---|---|---|---|---|---|\n|Optimizer|-| | |AdamW|-|-|\n|Warmup Tokens|-| | |250,000|-|-|\n|LR Schedule|-| | |Linear|-|-|\n|Batch Size|-|20|20|100|128| |\n|# Epoch|-|40|40|4|2| |\n|Learning Rate|PrefixEmbed|2.00E-04|2.00E-04|4.00E-04|5.00E-04| |\n| |PrefixLayer|5.00E-05|5.00E-05|5.00E-05|1.00E-04| |\n| |LoRA|-|-|-|2.00E-4| |\n| |PrefixEmbed lp|16|32|64|256| |\n|Adaptation-Specific|PrefixEmbed li|-|-|-|8| |\n| |PrefixTune|rlp = rv = 8 = li = 8|-|-|-| |\n| |LoRA|-|-|-|q| |\n\nTable 17: The hyperparameters used for different GPT-3 adaptation methods on MNLI(m)-n.\n\nwhere our similarity is defined as:\n\n\u03c6(A, B, i, j) = \u03c8(U A, U B, i, j) = \u2211p=1 \u03c32i i = 1(1 \u2212 d(U Ai, U B j)\u00b2)\n\nThis similarity satisfies that if U Ai and U Bj share the same column span, then \u03c6(A, B, i, j) = 1. If they are completely orthogonal, then \u03c6(A, B, i, j) = 0. Otherwise, \u03c6(A, B, i, j) \u2208 (0, 1).\n\n# ADDITIONAL EXPERIMENTS ON LOW-RANK MATRICES\n\nWe present additional results from our investigation into the low-rank update matrices.\n\n# CORRELATION BETWEEN LORA MODULES\n\nSee Figure 6 and Figure 7 for how the results presented in Figure 3 and Figure 4 generalize to other layers.\n\n# EFFECT OF r ON GPT-2\n\nWe repeat our experiment on the effect of r (Section 7.2) in GPT-2. Using the E2E NLG Challenge dataset as an example, we report the validation loss and test metrics achieved by different choices of r after training for 26,000 steps. We present our result in Table 18. The optimal rank for GPT-2 Medium is between 4 and 16 depending on the metric used, which is similar to that for GPT-3 175B. Note that the relationship between model size and the optimal rank for adaptation is still an open question.\n\n# CORRELATION BETWEEN W AND \u2206W\n\nSee Figure 8 for the normalized subspace similarity between W and \u2206W with varying r. Note again that \u2206W does not contain the top singular directions of W, since the similarity between the top 4 directions in \u2206W and the top-10% of those in W barely exceeds 0.2. This gives evidence that \u2206W contains those \u201ctask-specific\u201d directions that are otherwise not emphasized in W. An interesting next question to answer, is how \u201cstrong\u201d do we need to amplify those task-specific directions, in order for the model adaptation to work well?\n\n24", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "287a4b0c-80be-4eda-aec4-b39d5de0f095": {"__data__": {"id_": "287a4b0c-80be-4eda-aec4-b39d5de0f095", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c28fea0f-0f26-468f-9e3a-cab565d71d0a", "node_type": "4", "metadata": {}, "hash": "0ba4a599132e93700236a9c83df4465840babe561be31cc955948dbe9d6864d6", "class_name": "RelatedNodeInfo"}}, "text": "# Figure 6: Normalized subspace similarity between the column vectors of Ar=8 and Ar=64 for both \u2206Wq and \u2206Wv from the 1st, 32nd, 64th, and 96th layers in a 96-layer Transformer.\n\n|Layer|Wq|Wv|\n|---|---|---|\n|1|11.0|0.2|\n|6|6|0.0|\n|12|12| |\n|18|180.8| |\n|23|23| |\n|29|29| |\n|35|35| |\n|40|40| |\n|46|46| |\n|52|52| |\n|58|58| |\n\n# AMPLIFICATION FACTOR\n\nOne can naturally consider a feature amplification factor as the ratio \u2016U >W V >\u2016F , where U and V\u2016\u2206W \u2016F are the left- and right-singular matrices of the SVD decomposition of \u2206W . (Recall U U >W V >V gives the \u201cprojection\u201d of W onto the subspace spanned by \u2206W .)\n\nIntuitively, when \u2206W mostly contains task-specific directions, this quantity measures how much of them are amplified by \u2206W . As shown in Section 7.3, for r = 4, this amplification factor is as large as 20. In other words, there are (generally speaking) four feature directions in each layer (out of the entire feature space from the pre-trained model W ), that need to be amplified by a very large factor 20, in order to achieve our reported accuracy for the downstream specific task. And, one should expect a very different set of feature directions to be amplified for each different downstream task.\n\nOne may notice, however, for r = 64, this amplification factor is only around 2, meaning that most directions learned in \u2206W with r = 64 are not being amplified by much. This should not be surprising, and in fact gives evidence (once again) that the intrinsic rank needed to represent the \u201ctask-specific directions\u201d (thus for model adaptation) is low. In contrast, those directions in the rank-4 version of \u2206W (corresponding to r = 4) are amplified by a much larger factor 20.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1220fd7-046c-497d-a5ce-2537034c34dd": {"__data__": {"id_": "d1220fd7-046c-497d-a5ce-2537034c34dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a1d3396a-359c-4e00-acc0-82ff635a98ab", "node_type": "4", "metadata": {}, "hash": "b9db3ce904fc8c8f599d57b3012640ea2856f4e2dafddabaaabf0f696309c2ad", "class_name": "RelatedNodeInfo"}}, "text": "# Figure 7: Normalized subspace similarity between the column vectors of Ar=64 from two randomly seeded runs, for both \u2206Wq and \u2206Wv from the 1st, 32nd, 64th, and 96th layers in a 96-layer Transformer.\n\n|Layer|Rank r|val loss|BLEU|NIST|METEOR|ROUGE L|CIDEr|\n|---|---|---|---|---|---|---|---|\n|1|211|1.23|68.72|8.72|0.4565|0.7052|2.4329|\n|32|414|1.18|70.38|8.84|0.4689|0.7186|2.5349|\n|64|8|1.17|69.57|8.74|0.4636|0.7196|2.5196|\n|96|32|1.16|69.33|8.77|0.4642|0.7105|2.5255|\n| |11128|1.16|68.73|8.67|0.4628|0.7127|2.5030|\n| |31512|1.16|68.78|8.68|0.4637|0.7128|2.5025|\n\n# Table 18: Validation loss and test set metrics on E2E NLG Challenge achieved by LoRA with different rank r using GPT-2 Medium.\n\nUnlike on GPT-3 where r = 1 suffices for many tasks, here the performance peaks at r = 16 for validation loss and r = 4 for BLEU, suggesting the GPT-2 Medium has a similar intrinsic rank for adaptation compared to GPT-3 175B. Note that some of our hyperparameters are tuned on r = 4, which matches the parameter count of another baseline, and thus might not be optimal for other choices of r.\n\n# Figure 8: Normalized subspace similarity between the singular directions of Wq and those of \u2206Wq with varying r and a random baseline.\n\n|(Wq, Ar = 4, i, j)|(Wq, Ar = 8, i, j)|(Wq, Ar = 64, i, j)|(Wq, Arand, i, j)|\n|---|---|---|---|\n|451|555|0.200| |\n|658|762|0.175| |\n|865|969|0.150| |\n|1072|1176|0.125| |\n| | |0.100| |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"247bcc3c-166c-4e1d-b7bf-b89b12432dbb": {"node_ids": ["86415156-f869-4a51-8ce9-dada516340f1"], "metadata": {}}, "504d03f2-f63a-4a78-ba26-f2174a4d0dad": {"node_ids": ["1db94a8e-3e0e-4287-9bf1-a977b1489d19"], "metadata": {}}, "1df3586a-38fb-48fd-afdc-238e74bea111": {"node_ids": ["4b6ec685-c811-4a65-9ea2-08f1da836006"], "metadata": {}}, "3edafba9-7c7c-4bcb-b1da-05614d434e70": {"node_ids": ["241c999c-71af-42b5-bf87-c878ea2831ca"], "metadata": {}}, "c48223cc-c3ad-4000-9e21-920f781c5716": {"node_ids": ["212e7b72-fcd3-482a-9515-8a8ac37963d0"], "metadata": {}}, "12d43681-7207-4c64-9271-ca3c8011311b": {"node_ids": ["d99d75cc-df71-4109-a5b6-56bf90318822", "353924a4-28e8-4871-8866-e3a295cb2c8d"], "metadata": {}}, "df9266e1-aed0-40e8-baa0-50c1176bc9ac": {"node_ids": ["2a4ca47e-11b6-41f3-b172-3e80099c9bf6", "49c7a14d-fe9f-40b1-a5a0-c2e47b332a39"], "metadata": {}}, "6dafd937-f703-40eb-9b35-fdfa06374640": {"node_ids": ["4bede955-9568-4127-839d-1d4a1545dc87"], "metadata": {}}, "2b115dac-cb32-4bae-99fe-9cc1bd788c9c": {"node_ids": ["44ce631e-1426-452b-8932-9fff97fe7091"], "metadata": {}}, "62d3220a-2116-4a29-bcf9-e84cd6910dc3": {"node_ids": ["0781fa73-22c7-4282-becf-2d9a671e3d3d"], "metadata": {}}, "2d51054d-6664-4ee0-ba71-88f5bacfdcd8": {"node_ids": ["072fb5a7-46a0-4060-978c-c8645fde4a10"], "metadata": {}}, "4690e286-763b-4f23-b1b3-009c74df0c5e": {"node_ids": ["299f57ae-a086-41e2-858e-1df4b8a3531a"], "metadata": {}}, "f5bf4f04-3d68-4d59-be14-3da4c8094397": {"node_ids": ["b2120f5b-e0f1-4d97-85cd-13ca6a7b30ba"], "metadata": {}}, "0749e919-af60-4d3b-8b3c-333a623117a3": {"node_ids": ["23e30986-dd80-4603-b33e-4993ca4674f3", "dfdbbf29-2a4b-45fb-badf-be8436b16ddb"], "metadata": {}}, "ab5c9b84-0d38-4cbd-bf8e-62a83f09b1d1": {"node_ids": ["db0e6eef-20c6-4920-bc39-2d93d428b7a2", "0bada0cf-794a-40ca-8882-f94a563a2d65"], "metadata": {}}, "fdd9df16-251a-4233-8269-5b21371850ae": {"node_ids": ["2ab26c8f-3271-4b59-acf8-c902d20351f1"], "metadata": {}}, "d6278ccd-0a3b-4828-be53-7a715d1aa418": {"node_ids": ["5cd669f2-b142-4f10-a28e-e85bf4249bd4"], "metadata": {}}, "c276e4dd-7eb0-47ab-9fe1-01c8d3880ea0": {"node_ids": ["eda22710-26e2-44dc-83b1-83a7d842c8a5"], "metadata": {}}, "4429fcb9-241a-44ce-bbbb-28be8a228e9c": {"node_ids": ["7d689815-fac1-464d-97e5-97b35ede1db8", "e30d1f37-1a28-4e43-ad3d-c88a664faa86"], "metadata": {}}, "de6ba9c8-ec35-456c-a781-e8ecc34e7bec": {"node_ids": ["a76e958a-bfcf-4b5f-9454-7d233c8c7d28", "61b6cae7-3a63-418f-837f-ac8a8815005d"], "metadata": {}}, "4c57bff8-dbe3-4a5c-b732-d9d5217d4aab": {"node_ids": ["24554c59-3d68-49d1-9d98-9de7d8da5315"], "metadata": {}}, "1239de6d-e7d8-4883-be0f-190f81e639b1": {"node_ids": ["1752ff94-e54c-4a26-8267-5431b3a66776", "d9053eeb-861a-457b-aba8-2cbb92f86040"], "metadata": {}}, "b56ed615-ceeb-4964-bc9e-bb355b4355a4": {"node_ids": ["17b6a9a2-19d7-4346-accd-3959ddca986f", "a38fc42b-7c0f-4ecd-978e-6e95b955bc6a"], "metadata": {}}, "f5b49194-ea72-4320-91dc-edc64de669a3": {"node_ids": ["0d1149a8-b5a5-4e58-9e39-584d46a7ef59"], "metadata": {}}, "c28fea0f-0f26-468f-9e3a-cab565d71d0a": {"node_ids": ["287a4b0c-80be-4eda-aec4-b39d5de0f095"], "metadata": {}}, "a1d3396a-359c-4e00-acc0-82ff635a98ab": {"node_ids": ["d1220fd7-046c-497d-a5ce-2537034c34dd"], "metadata": {}}}}