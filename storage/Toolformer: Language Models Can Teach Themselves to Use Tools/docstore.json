{"docstore/metadata": {"8883192f-bd3d-4d39-9db0-3c6b53d2c370": {"doc_hash": "2c2c961fa9e40606b5bfe52bd02b43b536b4ba1e3b9967d39e30c7f0a8bb898b"}, "a57814ee-8ef7-4d20-a9cd-32cebb57863a": {"doc_hash": "ee0945a450bd2685963ee59376cd987173507be198b3022b13066a4d640b6f83"}, "cea75d86-480b-43d7-aeb0-259c84c50a44": {"doc_hash": "9d9359a80f697bd6e202981ed3009e2b6b63af799d4ab102fdb8fa489d5026e1"}, "13207cf7-80cc-45b9-8997-079d14cc8bd7": {"doc_hash": "0db40346e4092cb54ae318e0c89a80cc72035b80e890568e2ef0021fc695153f"}, "27d57489-58df-48c0-a64d-784b7f0f3bd0": {"doc_hash": "95b68d9b6cdb3f0a49b38d5e7e42a72acb111d735c9b87ffe936c2365a27bffb"}, "2ffef089-a4de-4b8f-a525-488eee533914": {"doc_hash": "99e226e0fa99df284ae15f3020c20d279345ae1541dc01878f55801b3ca7ec65"}, "4282d3af-4e60-4356-8ad2-9ec5b836bd06": {"doc_hash": "bce4c02837a8ff6d51c138a54343ba3916ae72c6a749f0adf09e38afb03c0605"}, "cc275abf-a109-47c0-b1d2-15d0d38f05db": {"doc_hash": "a86415da615d60465fa29ad36e4b15e9c5bea5e6acf570f38bac654df4db5a95"}, "51209ac6-cbd7-4a11-909a-bd7205f89928": {"doc_hash": "00ac25586f113133cc06d4fb2eb66132d05ea52181cfba0e2689ed58d2d6b406"}, "6ddaad7f-9806-4bdb-894b-505a9065a993": {"doc_hash": "0ff47a7a558a3e4bf49e1ba57039e76451cad599b67017da21bdbb0bd616c2f8"}, "909bdcc3-15c2-439f-bd37-95be22277e45": {"doc_hash": "e059c3a91d43aae3151f6abcb0e11af5636a5a9560d0811d317180be5355648d"}, "606a5e5e-6633-4800-9cc1-0635f0abfa8e": {"doc_hash": "6649186643eeb19ad4da16b9c8c282b7747476ba76d38f3aa174da1e71fe95ab"}, "d1140389-bb3a-478e-a038-e98a3e801170": {"doc_hash": "46c65aa606d876c72ddce9aa3952f49e0ff3dac28b230a349aa070e5826f948c"}, "f90606e5-a9bf-4a1d-a445-5b774319de09": {"doc_hash": "f4174bf47dc1c896fe8ed232a689c4488747c76d46812588f58870ed107125cb"}, "7c3e870f-d94e-47cc-b7ba-8706db2f3342": {"doc_hash": "519ae1b7a78c6798f88c719c3d05fa97dd9037a62829a3328a8ea8f984984bfc"}, "78b896a5-8c17-485f-acca-a5632ef5469f": {"doc_hash": "af4a93866ff402c20878b35162a447e10358994cf77b6a3958266e85eee7d61d"}, "91942c04-768a-4427-af6b-f5766072669e": {"doc_hash": "54dfd43c2ba4ee91560ad4d9a52696292f6e69cc2d869e8883759cede42c1e77"}, "ec8a7138-bc0b-4796-a1d3-10c03540d225": {"doc_hash": "2c2c961fa9e40606b5bfe52bd02b43b536b4ba1e3b9967d39e30c7f0a8bb898b", "ref_doc_id": "8883192f-bd3d-4d39-9db0-3c6b53d2c370"}, "caa2c8f8-fe0e-42d2-b388-a9c89bf91362": {"doc_hash": "e61f05cc47216b739ce9d4f6229342e5eb588716063e6b76193c3d0fd55d7b31", "ref_doc_id": "a57814ee-8ef7-4d20-a9cd-32cebb57863a"}, "dbe47de2-22dc-4370-a6c6-d5ab52337f9e": {"doc_hash": "648bb32a52f80b19806bca9e7ab177ebc6df73f6d70b312a3c25abb57ccfe9cb", "ref_doc_id": "a57814ee-8ef7-4d20-a9cd-32cebb57863a"}, "f35649ca-d719-4c11-863a-7c86e64a5e93": {"doc_hash": "9d9359a80f697bd6e202981ed3009e2b6b63af799d4ab102fdb8fa489d5026e1", "ref_doc_id": "cea75d86-480b-43d7-aeb0-259c84c50a44"}, "bccc5874-2299-4003-a744-3c68faff8304": {"doc_hash": "0db40346e4092cb54ae318e0c89a80cc72035b80e890568e2ef0021fc695153f", "ref_doc_id": "13207cf7-80cc-45b9-8997-079d14cc8bd7"}, "df57fd07-e5fd-4e96-ad49-20931720c73d": {"doc_hash": "95b68d9b6cdb3f0a49b38d5e7e42a72acb111d735c9b87ffe936c2365a27bffb", "ref_doc_id": "27d57489-58df-48c0-a64d-784b7f0f3bd0"}, "b44bedbc-cb7d-4fe2-b5d6-bab5a5fa1eee": {"doc_hash": "99e226e0fa99df284ae15f3020c20d279345ae1541dc01878f55801b3ca7ec65", "ref_doc_id": "2ffef089-a4de-4b8f-a525-488eee533914"}, "c863c4a8-7ddd-41e2-91b9-7b4437de8981": {"doc_hash": "bce4c02837a8ff6d51c138a54343ba3916ae72c6a749f0adf09e38afb03c0605", "ref_doc_id": "4282d3af-4e60-4356-8ad2-9ec5b836bd06"}, "bfde4795-b921-4dd9-809a-6e34c0966eb1": {"doc_hash": "a86415da615d60465fa29ad36e4b15e9c5bea5e6acf570f38bac654df4db5a95", "ref_doc_id": "cc275abf-a109-47c0-b1d2-15d0d38f05db"}, "e9c0b827-993f-4208-b791-016b4dcb0d74": {"doc_hash": "d9273460b912981f9a86228a74bf99a55bde4f17a69f63e4170734af3f302c88", "ref_doc_id": "51209ac6-cbd7-4a11-909a-bd7205f89928"}, "8abd108d-135b-467c-9bd6-7708d3a4d4f5": {"doc_hash": "e7a3778d49620a14ab3b9f76c8792f11b16f377dbd62cc53eaa22692025ed6d8", "ref_doc_id": "51209ac6-cbd7-4a11-909a-bd7205f89928"}, "ef3fb455-762a-4a48-b04d-f77c1e84adde": {"doc_hash": "feedbd39a3140d75773689b39d8a55354d7434525a4e34c77631ed9bc51c1d48", "ref_doc_id": "6ddaad7f-9806-4bdb-894b-505a9065a993"}, "0e6a81d8-c50c-47a1-8c2f-7dcbfd655ea7": {"doc_hash": "e5013c3cc2d59ad20308d4ab2346f3c5cbee47d711f4acd5671413a9beeaeb17", "ref_doc_id": "6ddaad7f-9806-4bdb-894b-505a9065a993"}, "63ff5778-71f1-46a9-9191-e76a1aa9dd54": {"doc_hash": "0803a83c613879d8cd3dd68afdd2add098e6ff752bc3d46d5e871e9b23797a7c", "ref_doc_id": "909bdcc3-15c2-439f-bd37-95be22277e45"}, "5f02555a-9557-469e-9722-3d5ed1499a98": {"doc_hash": "89e00e303d6c5825d11091575977e7775100d7fcd099f9e93dc1c06c964f953f", "ref_doc_id": "909bdcc3-15c2-439f-bd37-95be22277e45"}, "2f4bbb2d-d7a8-4239-9502-723bd3565e93": {"doc_hash": "7d576f9ff0b5cfa69644bf0709dbe4f6d03f85da7b92ceaee5bedeadd154038d", "ref_doc_id": "606a5e5e-6633-4800-9cc1-0635f0abfa8e"}, "f26c6257-f4ce-435a-8ea9-9e1d76595d5b": {"doc_hash": "e7ebaa7d5ee5dbb61685331b49fef53aa0539198badc20eefee516c1cb539e2e", "ref_doc_id": "606a5e5e-6633-4800-9cc1-0635f0abfa8e"}, "a307cba5-7651-44e5-a87a-6e8284fc43f1": {"doc_hash": "831051f99c468ae1691c851455449653fc8da9b343aa4ab8f352b6cc9fe472be", "ref_doc_id": "d1140389-bb3a-478e-a038-e98a3e801170"}, "72e1b9d0-efdb-474c-ad41-154474366c13": {"doc_hash": "aeb2c50a7f5c321ace5d2aa50457b710bdf7f6ac3ef875f9fb4fc1f82eb022fa", "ref_doc_id": "d1140389-bb3a-478e-a038-e98a3e801170"}, "0720e024-1343-475c-87f4-8650201de203": {"doc_hash": "2146a342b23647c16227a3c649c4640749095ed8c0bab0c27def2e904e6aec18", "ref_doc_id": "f90606e5-a9bf-4a1d-a445-5b774319de09"}, "7b3e9fe1-4037-43ae-b398-7fc8d4d21e61": {"doc_hash": "2edbb9ea8c392c95b9379193a477c4ed77ac61b7d11c44db3c7e158263903d36", "ref_doc_id": "f90606e5-a9bf-4a1d-a445-5b774319de09"}, "1eb15478-f3cf-443b-bd0d-fa281e88a335": {"doc_hash": "519ae1b7a78c6798f88c719c3d05fa97dd9037a62829a3328a8ea8f984984bfc", "ref_doc_id": "7c3e870f-d94e-47cc-b7ba-8706db2f3342"}, "4b378168-6c4d-4676-842f-a85be6851c0b": {"doc_hash": "229d9b43ea89147a770cf3522aafe7eb4d9c4ea2e53e8ccda39d97d393632ab1", "ref_doc_id": "78b896a5-8c17-485f-acca-a5632ef5469f"}, "fd01c436-2598-4d7c-be6a-5d826abedfdd": {"doc_hash": "bf2602b2b7fe82a85d4f9faf7d758e94eff35cea82a9ea247d63435b39d85c21", "ref_doc_id": "78b896a5-8c17-485f-acca-a5632ef5469f"}, "d644ac14-9bf6-4de6-a3e9-2f71a2a0c480": {"doc_hash": "54dfd43c2ba4ee91560ad4d9a52696292f6e69cc2d869e8883759cede42c1e77", "ref_doc_id": "91942c04-768a-4427-af6b-f5766072669e"}}, "docstore/data": {"ec8a7138-bc0b-4796-a1d3-10c03540d225": {"__data__": {"id_": "ec8a7138-bc0b-4796-a1d3-10c03540d225", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8883192f-bd3d-4d39-9db0-3c6b53d2c370", "node_type": "4", "metadata": {}, "hash": "2c2c961fa9e40606b5bfe52bd02b43b536b4ba1e3b9967d39e30c7f0a8bb898b", "class_name": "RelatedNodeInfo"}}, "text": "# Toolformer: Language Models Can Teach Themselves to Use Tools\n\n# Timo Schick, Jane Dwivedi-Yu, Roberto Dess\u00ec\u2020, Roberta Raileanu, Maria Lomeli, Luke Zettlemoyer, Nicola Cancedda, Thomas Scialom\n\n# Meta AI Research \u2020Universitat Pompeu Fabra\n\n# Abstract\n\nLanguage models (LMs) exhibit remarkable abilities to solve new tasks from just a few examples or textual instructions, especially at scale. They also, paradoxically, struggle with basic functionality, such as arithmetic or factual lookup, where much simpler and smaller models excel. In this paper, we show that LMs can teach themselves to use external tools via simple APIs and achieve the best of both worlds. We introduce Toolformer, a model trained to decide which APIs to call, when to call them, what arguments to pass, and how to best incorporate the results into future token prediction. This is done in a self-supervised way, requiring nothing more than a handful of demonstrations for each API. We incorporate a range of tools, including a calculator, a Q&A system, a search engine, a translation system, and a calendar. Toolformer achieves substantially improved zero-shot performance across a variety of downstream tasks, often competitive with much larger models, without sacrificing its core language modeling abilities.\n\n# 1 Introduction\n\nLarge language models achieve impressive zero- and few-shot results on a variety of natural language processing tasks (Brown et al., 2020; Chowdhery et al., 2022, i.a.) and show several emergent capabilities (Wei et al., 2022). However, all of these models have several inherent limitations that can at best be partially addressed by further scaling. These limitations include an inability to access up-to-date information on recent events (Komeili et al., 2022) and the related tendency to hallucinate facts (Maynez et al., 2020; Ji et al., 2022), difficulties in understanding low-resource languages (Lin et al., 2021), a lack of mathematical skills to perform precise calculations (Patel et al., 2021) and an unawareness of the progression of time (Dhingra et al., 2022).\n\nThe New England Journal of Medicine is a registered trademark of [QA(\u201cWho is the publisher of The New England Journal of Medicine?\u201d) \u2192 Massachusetts Medical Society] the MMS.\n\nOut of 1400 participants, 400 (or [Calculator(400 / 1400) \u2192 0.29] 29%) passed the test.\n\nThe name derives from \u201cla tortuga\u201d, the Spanish word for [MT(\u201ctortuga\u201d) \u2192 turtle] turtle.\n\nThe Brown Act is California\u2019s law [WikiSearch(\u201cBrown Act\u201d) \u2192 The Ralph M. Brown Act is an act of the California State Legislature that guarantees the public's right to attend and participate in meetings of local legislative bodies.] that requires legislative bodies, like city councils, to hold their meetings open to the public.\n\n# Figure 1\n\nExemplary predictions of Toolformer. The model autonomously decides to call different APIs (from top to bottom: a question answering system, a calculator, a machine translation system, and a Wikipedia search engine) to obtain information that is useful for completing a piece of text.\n\nA simple way to overcome these limitations of today\u2019s language models is to give them the ability to use external tools such as search engines, calculators, or calendars. However, existing approaches either rely on large amounts of human annotations (Komeili et al., 2022; Thoppilan et al., 2022) or limit tool use to task-specific settings only (e.g., Gao et al., 2022; Parisi et al., 2022), hindering a more widespread adoption of tool use in LMs. Therefore, we propose Toolformer, a model that learns to use tools in a novel way, which fulfills the following desiderata:\n\n- The use of tools should be learned in a self-supervised way without requiring large amounts of human annotations. This is impor-", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "caa2c8f8-fe0e-42d2-b388-a9c89bf91362": {"__data__": {"id_": "caa2c8f8-fe0e-42d2-b388-a9c89bf91362", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a57814ee-8ef7-4d20-a9cd-32cebb57863a", "node_type": "4", "metadata": {}, "hash": "ee0945a450bd2685963ee59376cd987173507be198b3022b13066a4d640b6f83", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dbe47de2-22dc-4370-a6c6-d5ab52337f9e", "node_type": "1", "metadata": {}, "hash": "648bb32a52f80b19806bca9e7ab177ebc6df73f6d70b312a3c25abb57ccfe9cb", "class_name": "RelatedNodeInfo"}}, "text": "# LM Dataset\n\n# Sample API Calls\n\n|Input|API Call|Response|Filtered Result|\n|---|---|---|---|\n|x1:i-1 = Pittsburgh is|ci1 = What other name is Pittsburgh known by?|ri1 = Steel City|L(ci1 Steel City)i\u2192 x* Pittsburgh is= also known as|\n|xi:n = the Steel City|ci2 = Which country is Pittsburgh in?|ri2 = United States|L(ci2 [QA(What \u2026? i \u2192 United States) \u2192 Steel City)]|\n\nFigure 2: Key steps in our approach, illustrated for a question answering tool: Given an input text x, we first sample a position i and corresponding API call candidates ci1, ci2, . . . , ci k. We then execute these API calls and filter out all calls which do not reduce the loss Li over the next tokens. All remaining API calls are interleaved with the original text, resulting in a new text x\u2217.\n\nTant not only because of the costs associated with such annotations, but also because what humans find useful may be different from what a model finds useful.\n\n- The LM should not lose any of its generality and should be able to decide for itself when and how to use which tool. In contrast to existing approaches, this enables a much more comprehensive use of tools that is not tied to specific tasks.\n\nOur approach for achieving these goals is based on the recent idea of using large LMs with in-context learning (Brown et al., 2020) to generate entire datasets from scratch (Schick and Sch\u00fctze, 2021b; Honovich et al., 2022; Wang et al., 2022): Given just a handful of human-written examples of how an API can be used, we let a LM annotate a huge language modeling dataset with potential API calls. We then use a self-supervised loss to determine which of these API calls actually help the model in predicting future tokens. Finally, we finetune the LM itself on the API calls that it considers useful. As illustrated in Figure 1, through this simple approach, LMs can learn to control a variety of tools, and to choose for themselves which tool to use when and how.\n\nAs our approach is agnostic of the dataset being used, we can apply it to the exact same dataset that was used to pretrain a model in the first place. This ensures that the model does not lose any of its generality and language modeling abilities. We conduct experiments on a variety of different downstream tasks, demonstrating that after learning to use tools, Toolformer, which is based on a pretrained GPT-J model (Wang and Komatsuzaki, 2021) with 6.7B parameters, achieves much stronger zero-shot results, clearly outperforming a much larger GPT-3 model (Brown et al., 2020) and several other baselines on various tasks.\n\n# 2 Approach\n\nOur aim is to equip a language model M with the ability to use different tools by means of API calls. We require that inputs and outputs for each API can be represented as text sequences. This allows seamless insertion of API calls into any given text, using special tokens to mark the start and end of each such call. We represent each API call as a tuple c = (ac, ic) where ac is the name of the API and ic is the corresponding input. Given an API call c with a corresponding result r, we denote the linearized sequences of the API call not including and including its result, respectively, as:\n\ne(c) = &lt;API&gt; ac(ic) &lt;/API&gt;\n\ne(c, r) = &lt;API&gt; ac(ic) \u2192 r &lt;/API&gt;\n\nwhere \u201c&lt;API&gt;\u201d, \u201c&lt;/API&gt;\u201d and \u201c\u2192\u201d are special tokens.1 Some examples of linearized API calls inserted into text sequences are shown in Figure 1.\n\nGiven a dataset C = {x1, . . . , x|C|} of plain texts, we first convert this dataset into a dataset C\u2217 augmented with API calls. This is done in three steps, illustrated in Figure 2: First, we exploit the in-context learning ability of M to sample a large number of potential API calls. We then execute these API calls and finally check whether the obtained responses are helpful for predicting future tokens; this is used as a filtering criterion. After filtering, we merge API calls for different tools, resulting in the augmented dataset C\u2217, and finetune.\n\nIn practice, we use the token sequences \u201c [\u201d, \u201c]\u201d and \u201c->\u201d to represent \u201c&lt;API&gt;\u201d, \u201c&lt;/API&gt;\u201d and \u201c\u2192\u201d, respectively. This enables our approach to work without modifying the existing LM\u2019s vocabulary.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dbe47de2-22dc-4370-a6c6-d5ab52337f9e": {"__data__": {"id_": "dbe47de2-22dc-4370-a6c6-d5ab52337f9e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a57814ee-8ef7-4d20-a9cd-32cebb57863a", "node_type": "4", "metadata": {}, "hash": "ee0945a450bd2685963ee59376cd987173507be198b3022b13066a4d640b6f83", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "caa2c8f8-fe0e-42d2-b388-a9c89bf91362", "node_type": "1", "metadata": {}, "hash": "e61f05cc47216b739ce9d4f6229342e5eb588716063e6b76193c3d0fd55d7b31", "class_name": "RelatedNodeInfo"}}, "text": "Given a dataset C = {x1, . . . , x|C|} of plain texts, we first convert this dataset into a dataset C\u2217 augmented with API calls. This is done in three steps, illustrated in Figure 2: First, we exploit the in-context learning ability of M to sample a large number of potential API calls. We then execute these API calls and finally check whether the obtained responses are helpful for predicting future tokens; this is used as a filtering criterion. After filtering, we merge API calls for different tools, resulting in the augmented dataset C\u2217, and finetune.\n\nIn practice, we use the token sequences \u201c [\u201d, \u201c]\u201d and \u201c->\u201d to represent \u201c&lt;API&gt;\u201d, \u201c&lt;/API&gt;\u201d and \u201c\u2192\u201d, respectively. This enables our approach to work without modifying the existing LM\u2019s vocabulary. For reasons of readability, we still refer to them as \u201c&lt;API&gt;\u201d, \u201c&lt;/API&gt;\u201d and \u201c\u2192\u201d throughout this section.", "mimetype": "text/plain", "start_char_idx": 3420, "end_char_idx": 4303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f35649ca-d719-4c11-863a-7c86e64a5e93": {"__data__": {"id_": "f35649ca-d719-4c11-863a-7c86e64a5e93", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cea75d86-480b-43d7-aeb0-259c84c50a44", "node_type": "4", "metadata": {}, "hash": "9d9359a80f697bd6e202981ed3009e2b6b63af799d4ab102fdb8fa489d5026e1", "class_name": "RelatedNodeInfo"}}, "text": "# Executing API Calls\n\nYour task is to add calls to a Question Answering API to a piece of text. The questions should help you get information required to complete the text. You can call the API by writing \"[QA(question)]\" where \"question\" is the question you want to ask. Here are some examples of API calls:\n\n# Input:\n\nJoe Biden was born in Scranton, Pennsylvania.\n\n# Output:\n\nJoe Biden was born in [QA(\"Where was Joe Biden born?\")] Scranton, [QA(\"In which state is Scranton?\")] Pennsylvania.\n\n# Input:\n\nCoca-Cola, or Coke, is a carbonated soft drink manufactured by the Coca-Cola Company.\n\n# Output:\n\nCoca-Cola, or [QA(\"What other name is Coca-Cola known by?\")] Coke, is a carbonated soft drink manufactured by [QA(\"Who manufactures Coca-Cola?\")] the Coca-Cola Company.\n\n# Input:\n\nx\n\n# Output:\n\n# Filtering API Calls\n\nLet i be the position of the API call ci in the sequence x = x1, . . . , xn, and let ri be the response from the API. Further, given a sequence (wi | i \u2208 N) of weights, let\n\nL(z) = \u2212\u2211wj\u2212i \u00b7 log pM (xj | z, x1:j\u22121)n\n\nbe the weighted cross entropy loss for M over the tokens x, . . . , xn if the model is prefixed with z.\n\nWe compare two different instantiations of this loss:\n\nLi = Li(e(ci, ri))\n\nLi = min (Li(\u03b5), L(e(ci, \u03b5)))\n\nwhere \u03b5 denotes an empty sequence. The former is the weighted loss over all tokens xi, . . . , xn if the API call and its result are given to M as a prefix; the latter is the minimum of the losses obtained from (i) doing no API call at all and (ii) doing an API call, but not providing the response. Intuitively, an API call is helpful to M if providing it with both the input and the output of this call makes it easier for the model to predict future tokens, compared to not receiving the API call at all, or receiving only its input.\n\n# Sampling API Calls\n\nFor each API, we write a prompt P (x) that encourages the LM to annotate an example x = x1, . . . , xn with API calls. An example of such a prompt for a question answering tool is shown in Figure 3; all prompts used are shown in Appendix A.2. Let pM (zn+1 | z1, . . . , zn) be the probability that M assigns to token zn+1 as a continuation for the sequence z1, . . . , zn. We first sample up to k candidate positions for doing API calls by computing, for each i \u2208 {1, . . . , n}, the probability\n\npi = pM (<API> | P (x), x1:i\u22121)\n\nthat M assigns to starting an API call at position i. Given a sampling threshold \u03c4s, we keep all positions I = {i | pi > \u03c4s}; if there are more than k such positions, we only keep the top k.\n\nFor each position i \u2208 I, we then obtain up to m1, . . . , ci m by sampling from M given the sequence [P (x), x1, . . . , xi\u22121, <API>] as a prefix and </API> as an end-of-sequence token.\n\nWe provide e(c, r) as a prefix instead of inserting it at position i because M is not yet finetuned on any examples containing API calls, so inserting it in the middle of x would interrupt the flow and not align with patterns in the pretraining corpus, thus hurting perplexity.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bccc5874-2299-4003-a744-3c68faff8304": {"__data__": {"id_": "bccc5874-2299-4003-a744-3c68faff8304", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "13207cf7-80cc-45b9-8997-079d14cc8bd7", "node_type": "4", "metadata": {}, "hash": "0db40346e4092cb54ae318e0c89a80cc72035b80e890568e2ef0021fc695153f", "class_name": "RelatedNodeInfo"}}, "text": "# 3 Tools\n\nWe explore a variety of tools to address different shortcomings of regular LMs. The only constraints we impose on these tools is that (i) both their inputs and outputs can be represented as text sequences, and (ii) we can obtain a few demonstrations of their intended use. Concretely, we explore the following five tools: a question answering system, a Wikipedia search engine, a calculator, a calendar, and a machine translation system. Some examples of potential calls and return strings for the APIs associated with each of these tools are shown in Table 1. We briefly discuss all tools below; further details can be found in Appendix A.\n\n# Question Answering\n\nOur first tool is a question answering system based on another LM that can answer simple factoid questions. Specifically, we use Atlas (Izacard et al., 2022), a retrieval-augmented LM finetuned on Natural Questions (Kwiatkowski et al., 2019).\n\n# Calculator\n\nAs a second tool, we use a calculator that can perform simple numeric calculations; we only support the four basic arithmetic operations. Results are always rounded to two decimal places.\n\n# Wikipedia Search\n\nOur third tool is a search engine that, given a search term, returns short text snippets from Wikipedia. Compared to our question answering tool, this search enables a model to get more comprehensive information on a subject, but requires it to extract the relevant parts by itself. As our search engine, we use a BM25 retriever (Robertson et al., 1995; Baeza-Yates et al., 1999) that indexes the Wikipedia dump from KILT (Petroni et al., 2021).\n\n# Machine Translation System\n\nOur fourth tool is a machine translation system based on a LM that can translate a phrase from any language into English. More concretely, we use the 600M parameter NLLB (Costa-juss\u00e0 et al., 2022) as our multilingual machine translation model that works for 200 languages (including low-resource ones). The source language is automatically detected using the fastText classifier (Joulin et al., 2016), while the target language is always set to English.\n\n# Calendar\n\nOur final tool is a calendar API that, when queried, returns the current date without taking any input. This provides temporal context for predictions that require some awareness of time.\n\n# 4 Experiments\n\nWe investigate whether our approach enables a model to use tools without any further supervision and to decide for itself when and how to call which of the available tools. To test this, we select a variety of downstream tasks where we assume at least one of the considered tools to be useful, and evaluate performance in zero-shot settings (Section 4.2). Beyond that, we also ensure that our approach does not hurt the model\u2019s core language modeling abilities; we verify this by looking at perplexity on two language modeling datasets (Section 4.3). Finally, we investigate how the ability to learn using tools is affected by model size (Section 4.4).\n\n# 4.1 Experimental Setup\n\nDataset Generation Throughout all of our experiments, we use a subset of CCNet (Wenzek et al., 2020) as our language modeling dataset C and GPT-J (Wang and Komatsuzaki, 2021) as our language model M. To reduce the computational cost of annotating C with API calls, we define heuristics for some APIs to get a subset of C for which API calls are more likely to be helpful than for an average text. For example, we only consider texts for the calculator tool if they contain at least three numbers. Details of the heuristics used are given in", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3512, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df57fd07-e5fd-4e96-ad49-20931720c73d": {"__data__": {"id_": "df57fd07-e5fd-4e96-ad49-20931720c73d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "27d57489-58df-48c0-a64d-784b7f0f3bd0", "node_type": "4", "metadata": {}, "hash": "95b68d9b6cdb3f0a49b38d5e7e42a72acb111d735c9b87ffe936c2365a27bffb", "class_name": "RelatedNodeInfo"}}, "text": "# API Name\n\n|API|Example Input|\n|---|---|\n|Question Answering|Where was the Knights of Columbus founded?|\n|Wikipedia Search|Fishing Reel Types|\n|Calculator|27 + 4 * 2|\n|Calendar|\u03b5|\n|Machine Translation|s\u00fbret\u00e9 nucl\u00e9aire|\n\n# Example Output\n\nNew Haven, Connecticut\n\nSpin fishing > Spin fishing is distinguished between fly fishing and bait cast fishing by the type of rod and reel used. There are two types of reels used when spin fishing, the open faced reel and the closed faced reel.\n\nToday is Monday, January 30, 2023.\n\nnuclear safety\n\n# Table 1: Examples of inputs and outputs for all APIs used.\n\n# Table 2: Number of examples with API calls in C\u2217 for different values of our filtering threshold \u03c4f.\n\n|API|\u03c4f = 0.5|\u03c4f = 1.0|\u03c4f = 2.0|\n|---|---|---|---|\n|Question Answering|51,987|18,526|5,135|\n|Wikipedia Search|207,241|60,974|13,944|\n|Calculator|3,680|994|138|\n|Calendar|61,811|20,587|3,007|\n|Machine Translation|3,156|1,034|229|\n\n# Appendix A\n\nFor obtaining C\u2217 from C, we perform all steps described in Section 2 and additionally filter out all examples for which all API calls were eliminated in the filtering step.\n\nFor the weighting function, we use wt = \u2211 w\u02dct with \u02dct = max(0, 1 \u2212 0.2 \u00b7 t)w to make sure that API calls happen close to where the information provided by the API is actually helpful for the model. The thresholds \u03c4s and \u03c4f are chosen individually for each tool to ensure a sufficiently larger number of examples; see Appendix A for details.\n\n# Model Finetuning\n\nWe finetune M on C\u2217 using a batch size of 128 and a learning rate of 1 \u00b7 10\u22125 with linear warmup for the first 10% of training. Details of our finetuning procedure are given in Appendix B.\n\n# Baseline Models\n\nThroughout the remainder of this section, we mainly compare the following models:\n\nFor most tasks, we additionally compare to OPT (66B) (Zhang et al., 2022) and GPT-36 (175B) (Brown et al., 2020), two models that are about 10 and 25 times larger than our other baseline models, respectively.\n\n# 4.2 Downstream Tasks\n\nWe evaluate all models on a variety of downstream tasks. In all cases, we consider a prompted zero-shot setup \u2013 i.e., models are instructed to solve each task in natural language, but we do not provide any in-context examples. This is in contrast to prior work on tool use (e.g., Gao et al., 2022; Parisi et al., 2022), where models are provided with dataset-specific examples of how a tool can be used to solve a concrete task.\n\nWe choose the more challenging zero-shot setup as we are interested in seeing whether Toolformer works in precisely those cases where a user does not specify in advance which tools should be used in which way for solving a specific problem.\n\nWe use standard greedy decoding, but with one modification for Toolformer: We let the model start an API call not just when &lt;API&gt; is the most likely.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b44bedbc-cb7d-4fe2-b5d6-bab5a5fa1eee": {"__data__": {"id_": "b44bedbc-cb7d-4fe2-b5d6-bab5a5fa1eee", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ffef089-a4de-4b8f-a525-488eee533914", "node_type": "4", "metadata": {}, "hash": "99e226e0fa99df284ae15f3020c20d279345ae1541dc01878f55801b3ca7ec65", "class_name": "RelatedNodeInfo"}}, "text": "# 4.2.1 LAMA\n\nWe evaluate our models on the SQuAD, Google-RE and T-REx subsets of the LAMA benchmark (Petroni et al., 2019). For each of these subsets, the task is to complete a short statement with a missing fact (e.g., a date or a place). As LAMA was originally designed to evaluate masked language models (e.g., Devlin et al., 2019), we filter out examples where the mask token is not the final token, so that the remaining examples can be processed in a left-to-right fashion. To account for different tokenizations and added complexity from not informing the model that a single word is required, we use a slightly more lenient evaluation criterion than exact match and simply check whether the correct word is within the first five words predicted by the model. As LAMA is based on statements obtained directly from Wikipedia, we prevent Toolformer from using the Wikipedia Search API to avoid giving it an unfair advantage.\n\nResults for all models can be seen in Table 3. All GPT-J models without tool use achieve similar performance. Crucially, Toolformer clearly outperforms these baseline models, improving upon the best baseline by 11.7, 5.2 and 18.6 points, respectively. It also clearly outperforms OPT (66B) and GPT-3 (175B), despite both models being much larger. This is achieved because the model independently decides to ask the question answering tool for the required information in almost all cases (98.1%); for only very few examples, it uses a different tool (0.7%) or no tool at all (1.2%).\n\n# 4.2.2 Math Datasets\n\nWe test mathematical reasoning abilities on ASDiv (Miao et al., 2020), SVAMP (Patel et al., 2021) and the MAWPS benchmark (Koncel-Kedziorski et al., 2016). We again account for the fact that we test all models in a zero-shot setup by using a more lenient evaluation criterion: As the required output is always a number, we simply check for the first number predicted by the model.\n\n**Table 3: Results on subsets of LAMA. Toolformer uses the question answering tool for most examples, clearly outperforming all baselines of the same size and achieving results competitive with GPT-3 (175B).**\n|Model|SQuAD|Google-RE|T-REx|\n|---|---|---|---|\n|GPT-J|17.8|4.9|31.9|\n|GPT-J + CC|19.2|5.6|33.2|\n|Toolformer (disabled)|22.1|6.3|34.9|\n|Toolformer|33.8|11.5|53.5|\n|OPT (66B)|21.6|2.9|30.1|\n|GPT-3 (175B)|26.8|7.0|39.8|\n\n**Table 4: Results for various benchmarks requiring mathematical reasoning. Toolformer makes use of the calculator tool for most examples, clearly outperforming even OPT (66B) and GPT-3 (175B).**\n|Model|ASDiv|SVAMP|MAWPS|\n|---|---|---|---|\n|GPT-J|7.5|5.2|9.9|\n|GPT-J + CC|9.6|5.0|9.3|\n|Toolformer (disabled)|14.8|6.3|15.0|\n|Toolformer|40.4|29.4|44.0|\n|OPT (66B)|6.0|4.9|7.9|\n|GPT-3 (175B)|14.0|10.0|19.8|\n\n# 4.2.3 Question Answering\n\nWe look at Web Questions (Berant et al., 2013), Natural Questions (Kwiatkowski et al., 2019) and TriviaQA (Joshi et al., 2017), the three question answering datasets considered by Brown et al. (2020). For evaluation, we check whether the first 20 words predicted by a model contain the correct answer instead of requiring an exact match. For Toolformer, we disable the question answering tool as an exception to this is if the model\u2019s prediction contains an equation (e.g., \u201cThe correct answer is 5+3=8\u201d), in which case we consider the first number after the \u201c=\u201d sign to be its prediction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c863c4a8-7ddd-41e2-91b9-7b4437de8981": {"__data__": {"id_": "c863c4a8-7ddd-41e2-91b9-7b4437de8981", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4282d3af-4e60-4356-8ad2-9ec5b836bd06", "node_type": "4", "metadata": {}, "hash": "bce4c02837a8ff6d51c138a54343ba3916ae72c6a749f0adf09e38afb03c0605", "class_name": "RelatedNodeInfo"}}, "text": "# 4.2.4 Multilingual Question Answering\n\nWe evaluate Toolformer and all baseline models on MLQA (Lewis et al., 2019), a multilingual question-answering benchmark. A context paragraph for each question is provided in English, while the question can be in Arabic, German, Spanish, Hindi, Vietnamese, or Simplified Chinese. In order to solve the task, the model needs to be able to understand both the paragraph and the question, so it may benefit from translating the question into English. Our evaluation metric is the percentage of times the model\u2019s generation, capped at 10 words, contains the correct answer.\n\nResults are shown in Table 6. Using API calls consistently improves Toolformer\u2019s performance for all languages, suggesting that it has learned to make use of the machine translation tool. Depending on the language, this tool is used for 63.8% to 94.9% of all examples; the only exception to this is Hindi, for which the machine translation tool is used in only 7.3% of cases. However, Toolformer does not consistently outperform vanilla GPT-J. This is mainly because for some languages, finetuning on CCNet deteriorates performance; this might be due to a distribution shift compared to GPT-J\u2019s original pretraining data.\n\n|Model|Es|De|Hi|Vi|Zh|Ar| |\n|---|---|---|---|---|---|---|---|\n|GPT-J|15.2|16.5|1.3|8.2|18.2|8.2| |\n|GPT-J + CC|15.7|14.9|0.5|8.3|13.7|4.6| |\n|Toolformer (disabled)|19.8|11.9| |1.2|10.1|15.0|3.1|\n|Toolformer|20.6|13.5|1.4|10.6|16.8|3.7| |\n|OPT (66B)|0.3|0.1|1.1|0.2|0.7|0.1| |\n|GPT-3 (175B)|3.4|1.1|0.1|1.7|17.7|0.1| |\n|GPT-J (All En)|24.3|27.0|23.9|23.3|23.1|23.6| |\n|GPT-3 (All En)|24.7|27.2|26.1|24.9|23.6|24.0| |\n\nTable 6: Results on MLQA for Spanish (Es), German (De), Hindi (Hi), Vietnamese (Vi), Chinese (Zh) and Arabic (Ar). While using the machine translation tool to translate questions is helpful across all languages, further pretraining on CCNet deteriorates performance; consequently, Toolformer does not consistently outperform GPT-J. The final two rows correspond to models that are given contexts and questions in English.\n\nOPT and GPT-3 perform surprisingly weak across all languages, mostly because they fail to provide an answer in English despite being instructed to do so. A potential reason for GPT-J not suffering from this problem is that it was trained on more multilingual data than both OPT and GPT-3, including the EuroParl corpus (Koehn, 2005; Gao et al., 2020). As an upper bound, we also evaluate GPT-J and GPT-3 on a variant of MLQA where both the context and the question are provided in English. In this setup, GPT-3 performs better than all other models, supporting our hypothesis that its subpar performance on MLQA is due to the multilingual aspect of the task.\n\n# 4.2.5 Temporal Datasets\n\nTo investigate the calendar API\u2019s utility, we evaluate all models on TEMPLAMA (Dhingra et al., 2022) and a new dataset that we call DATESET. TEMPLAMA is a dataset built from Wikidata that contains cloze queries about facts that change with time (e.g., \u201cCristiano Ronaldo plays for ___\u201d) as well as the correct answer for the years between 2010 and 2020. DATESET, described in Appendix D, is also generated through a series of templates, but populated using a combination of random dates/durations (e.g., \u201cWhat day of the week was it 30 days ago?\u201d). Critically, knowing the current date is required to answer these questions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfde4795-b921-4dd9-809a-6e34c0966eb1": {"__data__": {"id_": "bfde4795-b921-4dd9-809a-6e34c0966eb1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cc275abf-a109-47c0-b1d2-15d0d38f05db", "node_type": "4", "metadata": {}, "hash": "a86415da615d60465fa29ad36e4b15e9c5bea5e6acf570f38bac654df4db5a95", "class_name": "RelatedNodeInfo"}}, "text": "# Table 7: Results for the temporal datasets.\n\n|Model|TEMPLAMA|DATESET|\n|---|---|---|\n|GPT-J|13.7|3.9|\n|GPT-J + CC|12.9|2.9|\n|Toolformer (disabled)|12.7|5.9|\n|Toolformer|16.3|27.3|\n|OPT (66B)|14.5|1.3|\n|GPT-3 (175B)|15.5|0.8|\n\nToolformer outperforms all baselines, but does not make use of the calendar tool for TEMPLAMA.\n\nFor both tasks, we use the same evaluation as for the original LAMA dataset. Results shown in Table 7 illustrate that Toolformer outperforms all baselines for both TEMPLAMA and DATESET. However, closer inspection shows that improvements on TEMPLAMA cannot be attributed to the calendar tool, which is only used for 0.2% of all examples, but mostly to the Wikipedia search and question answering tools, which Toolformer calls the most. This makes sense given that named entities in TEMPLAMA are often so specific and rare that even knowing the exact date alone would be of little help. The best course of action for this dataset \u2013 first querying the calendar API to get the current date, and then querying the question answering system with this date \u2013 is not only prohibited by our restriction of using at most one API call per example, but also hard to learn for Toolformer given that all API calls in its training data are sampled independently.\n\nFor DATESET, on the other hand, the considerable improvement of Toolformer compared to other models can be fully accredited to the calendar tool, which it makes use of for 54.8% of all examples.\n\n# 4.3 Language Modeling\n\nIn addition to verifying improved performance on various downstream tasks, we also want to ensure that language modeling performance of Toolformer does not degrade through our finetuning with API calls. To this end, we evaluate our models on two language modeling datasets: WikiText (Merity et al., 2017) and a subset of 10,000 randomly selected documents from CCNet (Wenzek et al., 2020) that were not used during training. Perplexities of various models are shown in Table 8. As one would expect, finetuning on CCNet leads to slightly improved performance on a different CCNet subset, but it slightly deteriorates performance on WikiText, presumably because the original pre-training data for GPT-J is more similar to WikiText than our randomly selected subset of CCNet. Most importantly, however, training on C* (our dataset annotated with API calls) does not lead to an increase in perplexity compared to training on C when API calls are disabled at inference time.\n\n# Table 8: Perplexities of different models on WikiText and our validation subset of CCNet.\n\n|Model|WikiText|CCNet|\n|---|---|---|\n|GPT-J|9.9|10.6|\n|GPT-J + CC|10.3|10.5|\n|Toolformer (disabled)|10.3|10.5|\n\nAdding API calls comes without a cost in terms of perplexity for language modeling without any API calls.\n\n# 4.4 Scaling Laws\n\nWe investigate how the ability to ask external tools for help affects performance as we vary the size of our LM. To this end, we apply our approach not just to GPT-J, but also to four smaller models from the GPT-2 family (Radford et al., 2019), with 124M, 355M, 775M and 1.6B parameters, respectively. We do so using only a subset of three tools: the question answering system, the calculator, and the Wikipedia search engine. Apart from this, we follow the experimental setup described in Section 4.1.\n\nFigure 4 shows that the ability to leverage the provided tools only emerges at around 775M parameters: smaller models achieve similar performance both with and without tools. An exception to this is the Wikipedia search engine used mostly for QA benchmarks; we hypothesize that this is because the API is comparably easy to use. While models become better at solving tasks without API calls as they grow in size, their ability to make good use of the provided API improves at the same time. As a consequence, there remains a large gap between predictions with and without API calls even for our biggest model.\n\n# 5 Analysis\n\nDecoding Strategy We investigate the effect of our modified decoding strategy introduced in Section 4.2, where instead of always generating the token xt given x1, . . . , xt\u22121 would require marginalizing over all potential API calls that the model could make at position t, which is intractable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9c0b827-993f-4208-b791-016b4dcb0d74": {"__data__": {"id_": "e9c0b827-993f-4208-b791-016b4dcb0d74", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "51209ac6-cbd7-4a11-909a-bd7205f89928", "node_type": "4", "metadata": {}, "hash": "00ac25586f113133cc06d4fb2eb66132d05ea52181cfba0e2689ed58d2d6b406", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8abd108d-135b-467c-9bd6-7708d3a4d4f5", "node_type": "1", "metadata": {}, "hash": "e7a3778d49620a14ab3b9f76c8792f11b16f377dbd62cc53eaa22692025ed6d8", "class_name": "RelatedNodeInfo"}}, "text": "# LAMA\n\n# Math Benchmarks\n\n# QA Benchmarks\n\n| | | |Math Benchmarks| |QA Benchmarks|\n|---|---|---|---|---|---|\n|30|30| | |40| |\n|25|25| | |35| |\n|20|20|30| | | |\n|15|15| | |20| |\n|10|10| | |15| |\n| |Toolformer| | |10| |\n|5|Toolformer (disabled)|5| | | |\n|GPT3| |0| | | |\n|0|2000|4000|6000| | |\n|0|2000|4000|6000| | |\n|0|2000|4000|6000| | |\n\nFigure 4: Average performance on LAMA, our math benchmarks and our QA benchmarks for GPT-2 models of different sizes and GPT-J finetuned with our approach, both with and without API calls. While API calls are not helpful to the smallest models, larger models learn how to make good use of them. Even for bigger models, the gap between model predictions with and without API calls remains high.\n\nMost likely token, we generate the &lt;API&gt; token if it is one of the k most likely tokens. Table 9 shows performance on the T-REx subset of LAMA and on WebQS for different values of k. As expected, increasing k leads to the model doing API calls for more examples \u2013 from 40.3% and 8.5% with k = 1 (i.e., regular greedy decoding) to 98.1% and 100% for k = 10. While for T-REx, there is already a clear improvement in performance with greedy decoding, on WebQS our model only starts to make a substantial number of API calls as we slightly increase k. Interestingly, for k = 1 the model is calibrated to some extent: It decides to call APIs for examples that it would perform particularly badly on without making API calls. This can be seen from the fact that performance on examples where it decides not to make an API call (44.3 and 19.9) is higher than average performance if no API calls are made at all (34.9 and 18.9). However, this calibration is lost for higher values of k.\n\n# Data Quality\n\nWe qualitatively analyze some API calls generated with our approach for different APIs. Table 10 shows some examples of texts from CCNet augmented with API calls, as well as the corresponding score Li \u2212\u2212 Li + that is used as a filtering criterion, and whether the API calls made by the model are intuitively useful in the given context. As can be seen, high values of Li \u2212\u2212 Li typically correspond to useful API calls, whereas low values correspond to API calls that do not provide any information that is useful for predicting future tokens. There are some exceptions, e.g., an API call for \u201cFast train success\u201d in the fourth example that does not give any relevant information but still reduces perplexity. However, some amount of noise in the API calls that are not filtered can actually be useful as it forces the model finetuned on C\u2217 to not always blindly follow the results of each call it makes.\n\n| |T-REx|WebQS| | | | | | |\n|---|---|---|---|---|---|---|---|---|\n|k|All|AC|NC|%|All|AC|NC|%|\n|0|34.9|\u2013|34.9|0.0|18.9|\u2013|18.9|0.0|\n|1|47.8|53.0|44.3|40.3|19.3|17.1|19.9|8.5|\n|3|52.9|58.0|29.0|82.8|26.3|26.5|6.6|99.3|\n|10|53.5|54.0|22.5|98.1|26.3|26.4|\u2013|100.0|\n\nTable 9: Toolformer results on the T-REx subset of LAMA and on WebQS for different values of k used during decoding. Numbers shown are overall performance (All), performance on the subset where the model decides to make an API call (AC) and all remaining examples (NC), as well as the percentage of examples for which the model decides to call an API (%).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8abd108d-135b-467c-9bd6-7708d3a4d4f5": {"__data__": {"id_": "8abd108d-135b-467c-9bd6-7708d3a4d4f5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "51209ac6-cbd7-4a11-909a-bd7205f89928", "node_type": "4", "metadata": {}, "hash": "00ac25586f113133cc06d4fb2eb66132d05ea52181cfba0e2689ed58d2d6b406", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9c0b827-993f-4208-b791-016b4dcb0d74", "node_type": "1", "metadata": {}, "hash": "d9273460b912981f9a86228a74bf99a55bde4f17a69f63e4170734af3f302c88", "class_name": "RelatedNodeInfo"}}, "text": "Numbers shown are overall performance (All), performance on the subset where the model decides to make an API call (AC) and all remaining examples (NC), as well as the percentage of examples for which the model decides to call an API (%).\n\n# Related Work\n\n# Language Model Pretraining\n\nThere are various approaches that augment language models with some form of additional textual information during pretraining, including various forms of metadata (Keskar et al., 2019), HTML tags (Aghajanyan et al., 2021), Wikipedia markup (Schick et al., 2022), or related texts obtained from an information retrieval system (Guu et al., 2020; Borgeaud et al., 2021; Izacard et al., 2022). For all of these", "mimetype": "text/plain", "start_char_idx": 3019, "end_char_idx": 3712, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef3fb455-762a-4a48-b04d-f77c1e84adde": {"__data__": {"id_": "ef3fb455-762a-4a48-b04d-f77c1e84adde", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ddaad7f-9806-4bdb-894b-505a9065a993", "node_type": "4", "metadata": {}, "hash": "0ff47a7a558a3e4bf49e1ba57039e76451cad599b67017da21bdbb0bd616c2f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e6a81d8-c50c-47a1-8c2f-7dcbfd655ea7", "node_type": "1", "metadata": {}, "hash": "e5013c3cc2d59ad20308d4ab2346f3c5cbee47d711f4acd5671413a9beeaeb17", "class_name": "RelatedNodeInfo"}}, "text": "# Example\n\n# Useful\n\nThe Flodden Window (a war memorial dedicated to The Middleton Archers), in the Grade I-listed Church of St Leonard in Middleton is said to be the oldest war memorial in the United Kingdom. <API> WikiSearch(War memorial Flodden) \u2192 Battle of Flodden > Commemoration > The stained-glass Flodden Window in Middleton Parish Church [. . . ] was constructed by Sir Richard Assheton in memory of the Battle of Flodden and the archers from Middleton who fought in it. </API> Sir Richard Assheton of Middleton (who built St Leonard) was granted knighthood [. . . ]\n\nNote: The WL will be open on Friday, <API> Calendar() \u2192 Today is Thursday, March 9, 2017. </API> March 10, and Sunday, March 19 for regular hours.\n\nThe Nile has an approximate length of <API> QA(What is the approximate length of the Nile?) \u2192 6,853 km </API> 6,853 kilometers, the White Nile being its main source.\n\nIf Venus had an atmosphere similar to Earth\u2019s then you would expect Venus\u2019 mean temperature to be 499 K (1.74 x 287) rather than 735 K which is <API> Calculator(735 / 499) \u2192 1.47 </API> 1.47 (735 / 499) times hotter than it should be.\n\nYou are here: Home / Featured / Catch this fast train to success! <API> WikiSearch(Fast train success) \u2192 Fast Train > It also peaked at #23 on the Canadian CHUM singles chart, on June 26, 1971. The success of this single established Myles Goodwyn as the band\u2019s main songwriter, and made it possible for April Wine to record a second album. </API> Don\u2019t wait weeks and [. . .]\n\nOs Melhores Escolas em Jersey 2020 <API> MT(Os Melhores Escolas em Jersey) \u2192 The Best Schools in Jersey </API> On this page you can search for Universities, Colleges and Business schools in Jersey.\n\nEnjoy these pictures from the <API> Calendar() \u2192 Today is Friday, April 19, 2013. </API> Easter Egg Hunt.\n\n85 patients (23%) were hospitalised alive and admitted to a hospital ward. Of them, <API> Calculator(85 / 23) \u2192 3.70 </API> 65% had a cardiac aetiology [. . .]\n\nBut hey, after the <API> Calendar() \u2192 Today is Saturday, June 25, 2011. </API> Disneyland fiasco with the fire drill, I think it\u2019s safe to say Chewey won\u2019t let anyone die in a fire.\n\nThe last time I was with <API> QA(Who was last time I was with?) \u2192 The Last Time </API> him I asked what he likes about me and he said he would tell me one day.\n\n# Table 10: Examples of API calls for different tools, sorted by the value of Li \u2212\u2212 Li that is used as a filtering criterion.\n\nHigh values typically correspond to API calls that are intuitively useful for predicting future tokens.\n\n# Tool Use\n\nSeveral approaches aim to equip LMs with the ability to use external tools such as search engines (Komeili et al., 2022; Thoppilan et al., 2022; Lazaridou et al., 2022; Shuster et al., 2022; Yao et al., 2022), web browsers (Nakano et al., 2021), calculators (Cobbe et al., 2021; Thoppilan et al., 2022), translation systems (Thoppilan et al., 2022) and Python interpreters (Gao et al., 2022). The way these models learn to use tools can roughly be divided into two approaches: Either they rely on large amounts of human supervision (Komeili et al., 2022; Nakano et al., 2021; Thoppilan et al., 2022) or they work by prompting the language model in a few-shot setup tailored towards a specific task where it is known a priori which tools needs to be used (Gao et al., 2022; Lazaridou et al., 2022; Yao et al., 2022). In contrast, the self-supervised nature of Toolformer enables it to learn how and when to use tools without requiring a specific prompt that shows task-specific examples of how a tool could be used.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e6a81d8-c50c-47a1-8c2f-7dcbfd655ea7": {"__data__": {"id_": "0e6a81d8-c50c-47a1-8c2f-7dcbfd655ea7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ddaad7f-9806-4bdb-894b-505a9065a993", "node_type": "4", "metadata": {}, "hash": "0ff47a7a558a3e4bf49e1ba57039e76451cad599b67017da21bdbb0bd616c2f8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef3fb455-762a-4a48-b04d-f77c1e84adde", "node_type": "1", "metadata": {}, "hash": "feedbd39a3140d75773689b39d8a55354d7434525a4e34c77631ed9bc51c1d48", "class_name": "RelatedNodeInfo"}}, "text": "The way these models learn to use tools can roughly be divided into two approaches: Either they rely on large amounts of human supervision (Komeili et al., 2022; Nakano et al., 2021; Thoppilan et al., 2022) or they work by prompting the language model in a few-shot setup tailored towards a specific task where it is known a priori which tools needs to be used (Gao et al., 2022; Lazaridou et al., 2022; Yao et al., 2022). In contrast, the self-supervised nature of Toolformer enables it to learn how and when to use tools without requiring a specific prompt that shows task-specific examples of how a tool could be used. Perhaps most closely related to our work is TALM (Parisi et al., 2022), an approach that uses a similar self-supervised objective for teaching a model to use a calculator and a search engine, but explores this only in settings where a model is finetuned for downstream tasks.\n\n# Bootstrapping\n\nThe idea of using self-training and bootstrapping techniques to improve models has been investigated in various contexts, ranging from word sense disambiguation (Yarowsky, 1995), relation extraction (Brin, 1999; Agichtein and Gravano, 2000), parsing (McClosky et al., 2006; Reichart and Rappoport, 2007), sequence generation (He et al., 2020), few-shot text classification.", "mimetype": "text/plain", "start_char_idx": 2954, "end_char_idx": 4243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63ff5778-71f1-46a9-9191-e76a1aa9dd54": {"__data__": {"id_": "63ff5778-71f1-46a9-9191-e76a1aa9dd54", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "909bdcc3-15c2-439f-bd37-95be22277e45", "node_type": "4", "metadata": {}, "hash": "e059c3a91d43aae3151f6abcb0e11af5636a5a9560d0811d317180be5355648d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f02555a-9557-469e-9722-3d5ed1499a98", "node_type": "1", "metadata": {}, "hash": "89e00e303d6c5825d11091575977e7775100d7fcd099f9e93dc1c06c964f953f", "class_name": "RelatedNodeInfo"}}, "text": "# 6 Limitations\n\nWhile our approach enables LMs to learn how to use a variety of tools in a self-supervised way, there are some clear limitations to what can be achieved with our method in its current form. One such limitation is the inability of Toolformer to use tools in a chain (i.e., using the output of one tool as an input for another tool). This is due to the fact that API calls for each tool are generated independently; as a consequence, there are no examples of chained tool use in the finetuning dataset. Our current approach also does not allow the LM to use a tool in an interactive way \u2013 especially for tools such as search engines, that could potentially return hundreds of different results, enabling a LM to browse through these results or to refine its search query in a similar spirit to Nakano et al. (2021) can be crucial for certain applications. Beyond this, we found models trained with Toolformer to often be sensitive to the exact wording of their input when deciding whether or not to call an API; this is perhaps unsurprising given that LMs are known to be very sensitive to the prompt they are provided with in both zero- and few-shot settings (Jiang et al., 2020; Schick and Sch\u00fctze, 2021a). Depending on the tool, our method is also very sample-inefficient; for example, processing more than a million documents results in only a few thousand examples of useful calls to the calculator API. A potential solution to this problem might be to iteratively apply our approach, similar to how this is done in related bootstrapping approaches (Schick and Sch\u00fctze, 2021a; Izacard and Grave, 2021; Parisi et al., 2022). Finally, when deciding whether or not to make an API call, Toolformer currently does not take into account the tool-dependent, computational cost incurred from making an API call.\n\n# 8 Conclusion\n\nWe have introduced Toolformer, a language model that learns in a self-supervised way how to use different tools such as search engines, calculators, and translation systems via simple API calls. This is done by finetuning on a large number of sampled API calls that are filtered based on whether they\n\n# References\n\nArmen Aghajanyan, Dmytro Okhonko, Mike Lewis, Mandar Joshi, Hu Xu, Gargi Ghosh, and Luke Zettlemoyer. 2021. Htlm: Hyper-text pre-training and prompting of language models.\n\nEugene Agichtein and Luis Gravano. 2000. Snowball: Extracting relations from large plain-text collections. In Proceedings of the Fifth ACM Conference on Digital Libraries, DL \u201900, page 85\u201394, New York, NY, USA. Association for Computing Machinery.\n\nRicardo Baeza-Yates, Berthier Ribeiro-Neto, et al. 1999. Modern information retrieval, volume 463. ACM press New York.\n\nJonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. 2013. Semantic parsing on Freebase from question-answer pairs. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1533\u20131544, Seattle, Washington, USA. Association for Computational Linguistics.\n\nSebastian Borgeaud, Arthur Mensch, Jordan Hoffmann, Trevor Cai, Eliza Rutherford, Katie Millican, George van den Driessche, Jean-Baptiste Lespiau, Bogdan Damoc, Aidan Clark, Diego de Las Casas, Aurelia Guy, Jacob Menick, Roman Ring, Tom Hen nigan, Saffron Huang, Loren Maggiore, Chris Jones, Albin Cassirer, Andy Brock, Michela Paganini, Geoffrey Irving, Oriol Vinyals, Simon Osindero, Karen Simonyan, Jack W. Rae, Erich Elsen, and Laurent Sifre. 2021. Improving language models by retrieving from trillions of tokens.\n\nSergey Brin. 1999. Extracting patterns and relations from the world wide web. In The World Wide Web and Databases, pages 172\u2013183, Berlin, Heidelberg. Springer Berlin Heidelberg.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3697, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f02555a-9557-469e-9722-3d5ed1499a98": {"__data__": {"id_": "5f02555a-9557-469e-9722-3d5ed1499a98", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "909bdcc3-15c2-439f-bd37-95be22277e45", "node_type": "4", "metadata": {}, "hash": "e059c3a91d43aae3151f6abcb0e11af5636a5a9560d0811d317180be5355648d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63ff5778-71f1-46a9-9191-e76a1aa9dd54", "node_type": "1", "metadata": {}, "hash": "0803a83c613879d8cd3dd68afdd2add098e6ff752bc3d46d5e871e9b23797a7c", "class_name": "RelatedNodeInfo"}}, "text": "2021. Improving language models by retrieving from trillions of tokens.\n\nSergey Brin. 1999. Extracting patterns and relations from the world wide web. In The World Wide Web and Databases, pages 172\u2013183, Berlin, Heidelberg. Springer Berlin Heidelberg.\n\nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. 2020. Language models are few-shot learners. In Advances in Neural Information Processing Systems, volume 33, pages 1877\u20131901. Curran Associates, Inc.", "mimetype": "text/plain", "start_char_idx": 3447, "end_char_idx": 4322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f4bbb2d-d7a8-4239-9502-723bd3565e93": {"__data__": {"id_": "2f4bbb2d-d7a8-4239-9502-723bd3565e93", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "606a5e5e-6633-4800-9cc1-0635f0abfa8e", "node_type": "4", "metadata": {}, "hash": "6649186643eeb19ad4da16b9c8c282b7747476ba76d38f3aa174da1e71fe95ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f26c6257-f4ce-435a-8ea9-9e1d76595d5b", "node_type": "1", "metadata": {}, "hash": "e7ebaa7d5ee5dbb61685331b49fef53aa0539198badc20eefee516c1cb539e2e", "class_name": "RelatedNodeInfo"}}, "text": "# References\n\nAakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma, Gaurav Mishra, Adam Roberts, Paul Barham, Hyung Won Chung, Charles Sutton, Sebastian Gehrmann, Parker Schuh, Kensen Shi, Sasha Tsvyashchenko, Joshua Maynez, Abhishek Rao, Parker Barnes, Yi Tay, Noam Shazeer, Vinodkumar Prabhakaran, Emily Reif, Nan Du, Ben Hutchinson, Reiner Pope, James Bradbury, Jacob Austin, Michael Isard, Guy Gur-Ari, Pengcheng Yin, Toju Duke, Anselm Levskaya, Sanjay Ghemawat, Sunipa Dev, Henryk Michalewski, Xavier Garcia, Vedant Misra, Kevin Robinson, Liam Fedus, Denny Zhou, Daphne Ippolito, David Luan, Hyeontaek Lim, Barret Zoph, Alexander Spiridonov, Ryan Sepassi, David Dohan, Shivani Agrawal, Mark Omernick, Andrew M. Dai, Thanumalayan Sankaranarayana Pillai, Marie Pellat, Aitor Lewkowycz, Erica Moreira, Rewon Child, Oleksandr Polozov, Katherine Lee, Zongwei Zhou, Xuezhi Wang, Brennan Saeta, Mark Diaz, Orhan Firat, Michele Catasta, Jason Wei, Kathy Meier-Hellstern, Douglas Eck, Jeff Dean, Slav Petrov, and Noah Fiedel. 2022. Palm: Scaling language modeling with pathways.\n\nKelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Ming-Wei Chang. 2020. Realm: Retrieval-augmented language model pre-training.\n\nJunxian He, Jiatao Gu, Jiajun Shen, and Marc\u2019Aurelio Ranzato. 2020. Revisiting self-training for neural sequence generation. In International Conference on Learning Representations.\n\nOr Honovich, Thomas Scialom, Omer Levy, and Timo Schick. 2022. Unnatural instructions: Tuning language models with (almost) no human labor.\n\nGautier Izacard and Edouard Grave. 2021. Distilling knowledge from reader to retriever for question answering. In International Conference on Learning Representations.\n\nGautier Izacard, Patrick Lewis, Maria Lomeli, Lucas Hosseini, Fabio Petroni, Timo Schick, Jane Dwivedi-Yu, Armand Joulin, Sebastian Riedel, and Edouard Grave. 2022. Atlas: Few-shot learning with retrieval augmented language models.\n\nKarl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Mark Chen, Heewoo Jun, Lukasz Kaiser, Matthias Plappert, Jerry Tworek, Jacob Hilton, Reiichiro Nakano, et al. 2021. Training verifiers to solve math word problems. arXiv preprint arXiv:2110.14168.\n\nZiwei Ji, Nayeon Lee, Rita Frieske, Tiezheng Yu, Dan Su, Yan Xu, Etsuko Ishii, Yejin Bang, Andrea Madotto, and Pascale Fung. 2022. Survey of hallucination in natural language generation. ACM Computing Surveys.\n\nMarta R Costa-juss\u00e0, James Cross, Onur \u00c7elebi, Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, et al. 2022. No language left behind: Scaling human-centered machine translation. arXiv preprint arXiv:2207.04672.\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171\u20134186, Minneapolis, Minnesota. Association for Computational Linguistics.\n\nBhuwan Dhingra, Jeremy R. Cole, Julian Martin Eisenschlos, Daniel Gillick, Jacob Eisenstein, and William W. Cohen. 2022. Time-aware language models as temporal knowledge bases. Transactions of the Association for Computational Linguistics, 10:257\u2013273.\n\nZhengbao Jiang, Frank F. Xu, Jun Araki, and Graham Neubig. 2020. How can we know what language models know? Transactions of the Association for Computational Linguistics, 8:423\u2013438.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f26c6257-f4ce-435a-8ea9-9e1d76595d5b": {"__data__": {"id_": "f26c6257-f4ce-435a-8ea9-9e1d76595d5b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "606a5e5e-6633-4800-9cc1-0635f0abfa8e", "node_type": "4", "metadata": {}, "hash": "6649186643eeb19ad4da16b9c8c282b7747476ba76d38f3aa174da1e71fe95ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f4bbb2d-d7a8-4239-9502-723bd3565e93", "node_type": "1", "metadata": {}, "hash": "7d576f9ff0b5cfa69644bf0709dbe4f6d03f85da7b92ceaee5bedeadd154038d", "class_name": "RelatedNodeInfo"}}, "text": "2019. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171\u20134186, Minneapolis, Minnesota. Association for Computational Linguistics.\n\nBhuwan Dhingra, Jeremy R. Cole, Julian Martin Eisenschlos, Daniel Gillick, Jacob Eisenstein, and William W. Cohen. 2022. Time-aware language models as temporal knowledge bases. Transactions of the Association for Computational Linguistics, 10:257\u2013273.\n\nZhengbao Jiang, Frank F. Xu, Jun Araki, and Graham Neubig. 2020. How can we know what language models know? Transactions of the Association for Computational Linguistics, 8:423\u2013438.\n\nMandar Joshi, Eunsol Choi, Daniel Weld, and Luke Zettlemoyer. 2017. TriviaQA: A large scale distantly supervised challenge dataset for reading comprehension. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1601\u20131611, Vancouver, Canada. Association for Computational Linguistics.\n\nArmand Joulin, Edouard Grave, Piotr Bojanowski, Matthijs Douze, H\u00e9rve J\u00e9gou, and Tomas Mikolov. 2016. Fasttext. zip: Compressing text classification models. arXiv preprint arXiv:1612.03651.\n\nNitish Shirish Keskar, Bryan McCann, Lav R. Varshney, Caiming Xiong, and Richard Socher. 2019. Ctrl: A conditional transformer language model for controllable generation.\n\nLeo Gao, Stella Biderman, Sid Black, Laurence Golding, Travis Hoppe, Charles Foster, Jason Phang, Horace He, Anish Thite, Noa Nabeshima, et al. 2020. The pile: An 800gb dataset of diverse text for language modeling. arXiv preprint arXiv:2101.00027.\n\nLuyu Gao, Aman Madaan, Shuyan Zhou, Uri Alon, Pengfei Liu, Yiming Yang, Jamie Callan, and Graham Neubig. 2022. Pal: Program-aided language models.\n\nPhilipp Koehn. 2005. Europarl: A parallel corpus for statistical machine translation. In Proceedings of machine translation summit x: papers, pages 79\u201386.\n\nMojtaba Komeili, Kurt Shuster, and Jason Weston. 2022. Internet-augmented dialogue generation. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 8460\u20138478, Dublin, Ireland. Association for Computational Linguistics.", "mimetype": "text/plain", "start_char_idx": 2741, "end_char_idx": 5089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a307cba5-7651-44e5-a87a-6e8284fc43f1": {"__data__": {"id_": "a307cba5-7651-44e5-a87a-6e8284fc43f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1140389-bb3a-478e-a038-e98a3e801170", "node_type": "4", "metadata": {}, "hash": "46c65aa606d876c72ddce9aa3952f49e0ff3dac28b230a349aa070e5826f948c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72e1b9d0-efdb-474c-ad41-154474366c13", "node_type": "1", "metadata": {}, "hash": "aeb2c50a7f5c321ace5d2aa50457b710bdf7f6ac3ef875f9fb4fc1f82eb022fa", "class_name": "RelatedNodeInfo"}}, "text": "# References\n\nRik Koncel-Kedziorski, Subhro Roy, Aida Amini, Nate Kushman, and Hannaneh Hajishirzi. 2016. MAWPS: A math word problem repository. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 1152\u20131157, San Diego, California. Association for Computational Linguistics.\n\nTom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, Kristina Toutanova, Llion Jones, Matthew Kelcey, Ming-Wei Chang, Andrew M. Dai, Jakob Uszkoreit, Quoc Le, and Slav Petrov. 2019. Natural questions: A benchmark for question answering research. Transactions of the Association for Computational Linguistics, 7:452\u2013466.\n\nAngeliki Lazaridou, Elena Gribovskaya, Wojciech Stokowiec, and Nikolai Grigorev. 2022. Internet-augmented language models through few-shot prompting for open-domain question answering. arXiv preprint arXiv:2203.05115.\n\nPatrick Lewis, Barlas O\u011fuz, Ruty Rinott, Sebastian Riedel, and Holger Schwenk. 2019. Mlqa: Evaluating cross-lingual extractive question answering. arXiv preprint arXiv:1910.07475.\n\nXi Victoria Lin, Todor Mihaylov, Mikel Artetxe, Tianlu Wang, Shuohui Chen, Daniel Simig, Myle Ott, Naman Goyal, Shruti Bhosale, Jingfei Du, Ramakanth Pasunuru, Sam Shleifer, Punit Singh Koura, Vishrav Chaudhary, Brian O\u2019Horo, Jeff Wang, Luke Zettlemoyer, Zornitsa Kozareva, Mona Diab, Veselin Stoyanov, and Xian Li. 2021. Few-shot learning with multilingual language models.\n\nJoshua Maynez, Shashi Narayan, Bernd Bohnet, and Ryan McDonald. 2020. On faithfulness and factuality in abstractive summarization.\n\nDavid McClosky, Eugene Charniak, and Mark Johnson. 2006. Effective self-training for parsing. In Proceedings of the Human Language Technology Conference of the NAACL, Main Conference, pages 152\u2013159, New York City, USA. Association for Computational Linguistics.\n\nStephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. 2017. Pointer sentinel mixture models. In International Conference on Learning Representations.\n\nShen-yun Miao, Chao-Chun Liang, and Keh-Yih Su. 2020. A diverse corpus for evaluating and developing English math word problem solvers. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 975\u2013984, Online. Association for Computational Linguistics.\n\nXu Jiang, Karl Cobbe, Tyna Eloundou, Gretchen Krueger, Kevin Button, Matthew Knight, Benjamin Chess, and John Schulman. 2021. Webgpt: Browser-assisted question-answering with human feedback.\n\nAaron Parisi, Yao Zhao, and Noah Fiedel. 2022. Talm: Tool augmented language models.\n\nArkil Patel, Satwik Bhattamishra, and Navin Goyal. 2021. Are NLP models really able to solve simple math word problems? In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 2080\u20132094, Online. Association for Computational Linguistics.\n\nFabio Petroni, Aleksandra Piktus, Angela Fan, Patrick Lewis, Majid Yazdani, Nicola De Cao, James Thorne, Yacine Jernite, Vladimir Karpukhin, Jean Maillard, Vassilis Plachouras, Tim Rockt\u00e4schel, and Sebastian Riedel. 2021. KILT: a benchmark for knowledge intensive language tasks. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 2523\u20132544, Online. Association for Computational Linguistics.\n\nFabio Petroni, Tim Rockt\u00e4schel, Sebastian Riedel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, and Alexander Miller. 2019.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72e1b9d0-efdb-474c-ad41-154474366c13": {"__data__": {"id_": "72e1b9d0-efdb-474c-ad41-154474366c13", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1140389-bb3a-478e-a038-e98a3e801170", "node_type": "4", "metadata": {}, "hash": "46c65aa606d876c72ddce9aa3952f49e0ff3dac28b230a349aa070e5826f948c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a307cba5-7651-44e5-a87a-6e8284fc43f1", "node_type": "1", "metadata": {}, "hash": "831051f99c468ae1691c851455449653fc8da9b343aa4ab8f352b6cc9fe472be", "class_name": "RelatedNodeInfo"}}, "text": "Association for Computational Linguistics.\n\nFabio Petroni, Aleksandra Piktus, Angela Fan, Patrick Lewis, Majid Yazdani, Nicola De Cao, James Thorne, Yacine Jernite, Vladimir Karpukhin, Jean Maillard, Vassilis Plachouras, Tim Rockt\u00e4schel, and Sebastian Riedel. 2021. KILT: a benchmark for knowledge intensive language tasks. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 2523\u20132544, Online. Association for Computational Linguistics.\n\nFabio Petroni, Tim Rockt\u00e4schel, Sebastian Riedel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, and Alexander Miller. 2019. Language models as knowledge bases? In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 2463\u20132473, Hong Kong, China. Association for Computational Linguistics.\n\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. 2019. Language models are unsupervised multitask learners. OpenAI blog, 1(8):9.\n\nRoi Reichart and Ari Rappoport. 2007. Self-training for enhancement and domain adaptation of statistical parsers trained on small datasets. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 616\u2013623, Prague, Czech Republic. Association for Computational Linguistics.\n\nStephen E Robertson, Steve Walker, Susan Jones, Micheline M Hancock-Beaulieu, Mike Gatford, et al. 1995. Okapi at trec-3. Nist Special Publication Sp, 109:109.\n\nTimo Schick, Jane Dwivedi-Yu, Zhengbao Jiang, Fabio Petroni, Patrick Lewis, Gautier Izacard, Qingfei You, Christoforos Nalmpantis, Edouard Grave, and Sebastian Riedel. 2022. Peer: A collaborative language model.\n\nReiichiro Nakano, Jacob Hilton, Suchir Balaji, Jeff Wu, Timo Schick and Hinrich Sch\u00fctze. 2021a. Exploiting cloze-questions for few-shot text classification and natural language inference. In Proceedings of the", "mimetype": "text/plain", "start_char_idx": 3007, "end_char_idx": 5028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0720e024-1343-475c-87f4-8650201de203": {"__data__": {"id_": "0720e024-1343-475c-87f4-8650201de203", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f90606e5-a9bf-4a1d-a445-5b774319de09", "node_type": "4", "metadata": {}, "hash": "f4174bf47dc1c896fe8ed232a689c4488747c76d46812588f58870ed107125cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b3e9fe1-4037-43ae-b398-7fc8d4d21e61", "node_type": "1", "metadata": {}, "hash": "2edbb9ea8c392c95b9379193a477c4ed77ac61b7d11c44db3c7e158263903d36", "class_name": "RelatedNodeInfo"}}, "text": "# 16th Conference of the European Chapter of the Association for Computational Linguistics: Main Volume\n\npages 255\u2013269, Online. Association for Computational Linguistics.\n\n# References\n\nTimo Schick and Hinrich Sch\u00fctze. 2021b. Generating datasets with pretrained language models. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 6943\u20136951, Online and Punta Cana, Dominican Republic. Association for Computational Linguistics.\n\nKurt Shuster, Jing Xu, Mojtaba Komeili, Da Ju, Eric Michael Smith, Stephen Roller, Megan Ung, Moya Chen, Kushal Arora, Joshua Lane, Morteza Behrooz, William Ngan, Spencer Poff, Naman Goyal, Arthur Szlam, Y-Lan Boureau, Melanie Kambadur, and Jason Weston. 2022. Blenderbot 3: a deployed conversational agent that continually learns to responsibly engage.\n\nRomal Thoppilan, Daniel De Freitas, Jamie Hall, Noam Shazeer, Apoorv Kulshreshtha, Heng-Tze Cheng, Alicia Jin, Taylor Bos, Leslie Baker, Yu Du, YaGuang Li, Hongrae Lee, Huaixiu Steven Zheng, Amin Ghafouri, Marcelo Menegali, Yanping Huang, Maxim Krikun, Dmitry Lepikhin, James Qin, Dehao Chen, Yuanzhong Xu, Zhifeng Chen, Adam Roberts, Maarten Bosma, Vincent Zhao, Yanqi Zhou, Chung-Ching Chang, Igor Krivokon, Will Rusch, Marc Pickett, Pranesh Srinivasan, Laichee Man, Kathleen Meier-Hellstern, Meredith Ringel Morris, Tulsee Doshi, Renelito Delos Santos, Toju Duke, Johnny Soraker, Ben Zevenbergen, Vinodkumar Prabhakaran, Mark Diaz, Ben Hutchinson, Kristen Olson, Alejandra Molina, Erin Hoffman-John, Josh Lee, Lora Aroyo, Ravi Rajakumar, Alena Butryna, Matthew Lamm, Viktoriya Kuzmina, Joe Fenton, Aaron Cohen, Rachel Bernstein, Ray Kurzweil, Blaise Aguera-Arcas, Claire Cui, Marian Croak, Ed Chi, and Quoc Le. 2022. Lamda: Language models for dialog applications.\n\nShunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. 2022. React: Synergizing reasoning and acting in language models.\n\nDavid Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In 33rd Annual Meeting of the Association for Computational Linguistics, pages 189\u2013196, Cambridge, Massachusetts, USA. Association for Computational Linguistics.\n\nEric Zelikman, Yuhuai Wu, Jesse Mu, and Noah D. Goodman. 2022. Star: Bootstrapping reasoning with reasoning.\n\nSusan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen, Shuohui Chen, Christopher Dewan, Mona Diab, Xian Li, Xi Victoria Lin, Todor Mihaylov, Myle Ott, Sam Shleifer, Kurt Shuster, Daniel Simig, Punit Singh Koura, Anjali Sridhar, Tianlu Wang, and Luke Zettlemoyer. 2022. Opt: Open pre-trained transformer language models.\n\nBen Wang and Aran Komatsuzaki. 2021. GPT-J-6B: A 6 Billion Parameter Autoregressive Language Model. https://github.com/kingoflolz/mesh-transformer-jax.\n\nYizhong Wang, Yeganeh Kordi, Swaroop Mishra, Alisa Liu, Noah A. Smith, Daniel Khashabi, and Hannaneh Hajishirzi. 2022. Self-instruct: Aligning language model with self generated instructions.\n\nJason Wei, Yi Tay, Rishi Bommasani, Colin Raffel, Barret Zoph, Sebastian Borgeaud, Dani Yogatama, Maarten Bosma, Denny Zhou, Donald Metzler, Ed H. Chi, Tatsunori Hashimoto, Oriol Vinyals, Percy Liang, Jeff Dean, and William Fedus. 2022. Emergent abilities of large language models.\n\nGuillaume Wenzek, Marie-Anne Lachaux, Alexis Conneau, Vishrav Chaudhary, Francisco Guzm\u00e1n, Armand Joulin, and Edouard Grave. 2020.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b3e9fe1-4037-43ae-b398-7fc8d4d21e61": {"__data__": {"id_": "7b3e9fe1-4037-43ae-b398-7fc8d4d21e61", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f90606e5-a9bf-4a1d-a445-5b774319de09", "node_type": "4", "metadata": {}, "hash": "f4174bf47dc1c896fe8ed232a689c4488747c76d46812588f58870ed107125cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0720e024-1343-475c-87f4-8650201de203", "node_type": "1", "metadata": {}, "hash": "2146a342b23647c16227a3c649c4640749095ed8c0bab0c27def2e904e6aec18", "class_name": "RelatedNodeInfo"}}, "text": "Yizhong Wang, Yeganeh Kordi, Swaroop Mishra, Alisa Liu, Noah A. Smith, Daniel Khashabi, and Hannaneh Hajishirzi. 2022. Self-instruct: Aligning language model with self generated instructions.\n\nJason Wei, Yi Tay, Rishi Bommasani, Colin Raffel, Barret Zoph, Sebastian Borgeaud, Dani Yogatama, Maarten Bosma, Denny Zhou, Donald Metzler, Ed H. Chi, Tatsunori Hashimoto, Oriol Vinyals, Percy Liang, Jeff Dean, and William Fedus. 2022. Emergent abilities of large language models.\n\nGuillaume Wenzek, Marie-Anne Lachaux, Alexis Conneau, Vishrav Chaudhary, Francisco Guzm\u00e1n, Armand Joulin, and Edouard Grave. 2020. CCNet: Extracting high quality monolingual datasets from web crawl data. In Proceedings of the Twelfth Language Resources and Evaluation Conference, pages 4003\u20134012, Marseille, France. European Language Resources Association.", "mimetype": "text/plain", "start_char_idx": 2807, "end_char_idx": 3639, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1eb15478-f3cf-443b-bd0d-fa281e88a335": {"__data__": {"id_": "1eb15478-f3cf-443b-bd0d-fa281e88a335", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7c3e870f-d94e-47cc-b7ba-8706db2f3342", "node_type": "4", "metadata": {}, "hash": "519ae1b7a78c6798f88c719c3d05fa97dd9037a62829a3328a8ea8f984984bfc", "class_name": "RelatedNodeInfo"}}, "text": "# API Details\n\nWhen sampling and filtering API calls, by default we use values of \u03c4s = 0.05 and \u03c4f = 1.0 \u2013 i.e., we only make API calls at positions where the probability of the &lt;API&gt; token is at least 5%, and we keep API calls if they reduce the loss by at least 1.0. We only keep the top k = 5 such positions and sample up to m = 5 API calls for each position identified in a piece of text. Due to the heuristic filtering described below, we generate API calls for the calculator and machine translation system on only a small subset of C; to compensate for this, we set \u03c4s = 0.0, k = 20 and m = 10 for these tools. As the resulting sets of API calls are still comparably small, we additionally set \u03c4f = 0.5.\n\n# A.1 Implementation\n\n# Question Answering\n\nWe use the Atlas model of Izacard et al. (2022) finetuned on Natural Questions (Kwiatkowski et al., 2019) as our question answering system. For creating C* we use Atlas-large, enabling us to efficiently process millions of API calls; during inference, we use the larger Atlas-xxl model.\n\n# Calculator\n\nOur calculator is based on a simple Python script and only supports the operators \u201c+\u201d, \u201c\u2212\u201d, \u201c\u2217\u201d, and \u201c/\u201d. It does not return any result for syntactically invalid equations. For sampling API calls, we apply heuristic filters to our subset of CCNet and only process documents that either (i) contain at least three numbers within a window of 100 tokens, where one of these numbers is the result of applying a mathematical operation to the other two, (ii) contain one of the sequences \u201c=\u201d, \u201cequals\u201d, \u201cequal to\u201d, \u201ctotal of\u201d, \u201caverage of\u201d followed by a number, or (iii) contain at least three numbers; for texts that only match the last criterion, we only keep a random subset of 1%.\n\n# Calendar\n\nFor creating our dataset C*, we operate under the assumption that the calendar date in such cases should be the date that the document was created. We approximate this by extracting the date from the URL, if it is present. We filter out texts for which a date cannot be extracted, leaving around 18% of the documents.\n\n# Machine Translation\n\nFor both training and inference, we use the 600M parameter NLLB (Costa-juss\u00e0 et al., 2022) as our machine translation (MT) model. The source language is automatically detected using the fastText classifier (Joulin et al., 2016), while the target language is always set to English. Since most of the CCNet dataset is in English, we filter out the parts that contain only English text before generating API calls. More specifically, we only keep those paragraphs which contain text chunks in a language other than English preceded and followed by English text. We use text chunks of size 10 tokens. To determine whether the middle text chunk is in a language different than English we again use the fastText classifier with a confidence greater than 0.8. We also filter out any text chunks that contain only numbers or special symbols. This filtering mechanism allows us to generate data more efficiently by focusing our API call generations in places where the MT tool is likely to be helpful. After generating the MT API calls, we additionally remove from our training set those where the input to the MT tool appears after the API call but not before it. While during data generation the model can look ahead to generate API calls, this is not possible at inference time, so we want to dissuade the model from calling the API in such cases.\n\n# A.2 Prompts\n\nBelow, we list the prompts used to sample API calls for each tool considered.\n\n# Question Answering\n\nWe use the following prompt for the question answering tool:\n\nYour task is to add calls to a Question Answering API to a piece of text. The questions should help you get information required to complete the text. You can call the API by writing \"[QA(question)]\" where \"question\" is the question you want to ask. Here are some examples of API calls:\n\nInput: Joe Biden was born in Scranton, Pennsylvania.\n\nOutput: Joe Biden was born in [QA(\"Where was Joe Biden born?\")] Scranton, [QA(\"In which state is Scranton?\")] Pennsylvania.\n\nInput: Coca-Cola, or Coke, is a carbonated soft drink manufactured by the Coca-Cola Company.\n\nOutput: Coca-Cola, or [QA(\"What other name is Coca-Cola known by?\")] Coke, is a carbonated soft drink manufactured by [QA(\"Who manufactures Coca-Cola?\")] the Coca-Cola Company.\n\n# Calculator\n\nWe use the following prompt for the calculator:\n\nYour task is to add calls to a Calculator API to a piece of text.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4486, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b378168-6c4d-4676-842f-a85be6851c0b": {"__data__": {"id_": "4b378168-6c4d-4676-842f-a85be6851c0b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "78b896a5-8c17-485f-acca-a5632ef5469f", "node_type": "4", "metadata": {}, "hash": "af4a93866ff402c20878b35162a447e10358994cf77b6a3958266e85eee7d61d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd01c436-2598-4d7c-be6a-5d826abedfdd", "node_type": "1", "metadata": {}, "hash": "bf2602b2b7fe82a85d4f9faf7d758e94eff35cea82a9ea247d63435b39d85c21", "class_name": "RelatedNodeInfo"}}, "text": "# API Calls Examples\n\n# Calculator API\n\nThe calls should help you get information required to complete the text. You can call the API by writing \"[Calculator(expression)]\" where \"expression\" is the expression to be computed. Here are some examples of API calls:\n\n# Input:\n\nThe number in the next term is 18 + 12 x 3 = 54.\n\n# Output:\n\nThe number in the next term is 18 + 12 x 3 = [Calculator(18 + 12 * 3)] 54.\n\n# Input:\n\nThe population is 658,893 people. This is 11.4% of the national average of 5,763,868 people.\n\n# Output:\n\nThe population is 658,893 people. This is 11.4% of the national average of [Calculator(658,893 / 11.4%)] 5,763,868 people.\n\n# Input:\n\nA total of 252 qualifying matches were played, and 723 goals were scored (an average of 2.87 per match). This is three times less than the 2169 goals last year.\n\n# Output:\n\nA total of 252 qualifying matches were played, and 723 goals were scored (an average of [Calculator(723 / 252)] 2.87 per match). This is twenty goals more than the [Calculator(723 - 20)] 703 goals last year.\n\n# Input:\n\nI went to Paris in 1994 and stayed there until 2011, so in total, it was 17 years.\n\n# Output:\n\nI went to Paris in 1994 and stayed there until 2011, so in total, it was [Calculator(2011 - 1994)] 17 years.\n\n# Input:\n\nFrom this, we have 4 * 30 minutes = 120 minutes.\n\n# Output:\n\nFrom this, we have 4 * 30 minutes = [Calculator(4 * 30)] 120 minutes.\n\n# Wikipedia Search API\n\nWe use the following prompt for the Wikipedia search tool:\n\nYour task is to complete a given piece of text. You can use a Wikipedia Search API to look up information. You can do so by writing \"[WikiSearch(term)]\" where \"term\" is the search term you want to look up. Here are some examples of API calls:\n\n# Input:\n\nThe colors on the flag of Ghana have the following meanings: red is for the blood of martyrs, green for forests, and gold for mineral wealth.\n\n# Output:\n\nThe colors on the flag of Ghana have the following meanings: red is for [WikiSearch(\"Ghana flag red meaning\")] the blood of martyrs, green for forests, and gold for mineral wealth.\n\n# Input:\n\nBut what are the risks during production of nanomaterials? Some nanomaterials may give rise to various kinds of lung damage.\n\n# Output:\n\nBut what are the risks during production of nanomaterials? [WikiSearch(\"nanomaterial production risks\")] Some nanomaterials may give rise to various kinds of lung damage.\n\n# Input:\n\nMetformin is the first-line drug for patients with type 2 diabetes and obesity.\n\n# Output:\n\nMetformin is the first-line drug for [WikiSearch(\"Metformin first-line drug\")] patients with type 2 diabetes and obesity.\n\n# Machine Translation API\n\nWe use the following prompt for the machine translation tool:\n\nYour task is to complete a given piece of text by using a Machine Translation API.\n\nYou can do so by writing \"[MT(text)]\" where text is the text to be translated into English. Here are some examples:\n\n# Input:\n\nHe has published one book: O homem suprimido (\u201cThe Supressed Man\u201d)\n\n# Output:\n\nHe has published one book: O homem suprimido [MT(O homem suprimido)] (\u201cThe Supressed Man\u201d)\n\n# Input:\n\nIn Morris de Jonge\u2019s Jeschuah, der klassische j\u00fcdische Mann, there is a description of a Jewish writer\n\n# Output:\n\nIn Morris de Jonge\u2019s Jeschuah, der klassische j\u00fcdische Mann [MT(der klassische j\u00fcdische Mann)], there is a description of a Jewish writer.\n\n# Input:\n\n\u5357 \u4eac \u9ad8 \u6df3 \u53bf \u4f4f \u623f \u548c \u57ce \u4e61 \u5efa \u8bbe \u5c40 \u57ce \u5e02 \u65b0 \u533a \u8bbe \u8ba1 a plane of reference Gaochun is one of seven districts of the provincial capital Nanjing\n\n# Output:\n\n[MT(\u5357\u4eac\u9ad8\u6df3\u53bf\u4f4f\u623f\u548c\u57ce\u4e61\u5efa\u8bbe\u5c40 \u57ce\u5e02\u65b0\u533a \u8bbe\u8ba1)] a plane of reference Gaochun is one of seven districts of the provincial capital Nanjing.\n\n# Calendar API\n\nWe use the following prompt for the calendar tool:\n\nYour task is to add calls to a Calendar API to a piece of text.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3752, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd01c436-2598-4d7c-be6a-5d826abedfdd": {"__data__": {"id_": "fd01c436-2598-4d7c-be6a-5d826abedfdd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "78b896a5-8c17-485f-acca-a5632ef5469f", "node_type": "4", "metadata": {}, "hash": "af4a93866ff402c20878b35162a447e10358994cf77b6a3958266e85eee7d61d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b378168-6c4d-4676-842f-a85be6851c0b", "node_type": "1", "metadata": {}, "hash": "229d9b43ea89147a770cf3522aafe7eb4d9c4ea2e53e8ccda39d97d393632ab1", "class_name": "RelatedNodeInfo"}}, "text": "# Input:\n\n\u5357 \u4eac \u9ad8 \u6df3 \u53bf \u4f4f \u623f \u548c \u57ce \u4e61 \u5efa \u8bbe \u5c40 \u57ce \u5e02 \u65b0 \u533a \u8bbe \u8ba1 a plane of reference Gaochun is one of seven districts of the provincial capital Nanjing\n\n# Output:\n\n[MT(\u5357\u4eac\u9ad8\u6df3\u53bf\u4f4f\u623f\u548c\u57ce\u4e61\u5efa\u8bbe\u5c40 \u57ce\u5e02\u65b0\u533a \u8bbe\u8ba1)] a plane of reference Gaochun is one of seven districts of the provincial capital Nanjing.\n\n# Calendar API\n\nWe use the following prompt for the calendar tool:\n\nYour task is to add calls to a Calendar API to a piece of text. The API calls should help you get information required to complete the text. You can call the API by writing \"[Calendar()]\". Here are some examples of API calls:\n\n# Input:\n\nToday is the first Friday of the year.\n\n# Output:\n\nToday is the first [Calendar()] Friday of the year.", "mimetype": "text/plain", "start_char_idx": 3353, "end_char_idx": 4028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d644ac14-9bf6-4de6-a3e9-2f71a2a0c480": {"__data__": {"id_": "d644ac14-9bf6-4de6-a3e9-2f71a2a0c480", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "91942c04-768a-4427-af6b-f5766072669e", "node_type": "4", "metadata": {}, "hash": "54dfd43c2ba4ee91560ad4d9a52696292f6e69cc2d869e8883759cede42c1e77", "class_name": "RelatedNodeInfo"}}, "text": "# Input\n\nThe president of the United States is Joe Biden.\n\n# Output\n\nThe president of the United States is [Calendar()] Joe Biden.\n\n# Input\n\nThe current day of the week is Wednesday.\n\n# Output\n\nThe current day of the week is [Calendar()] Wednesday.\n\n# Input\n\nThe number of days from now until Christmas is 30.\n\n# Output\n\nThe number of days from now until Christmas is [Calendar()] 30.\n\n# Input\n\nThe store is never open on the weekend, so today it is closed.\n\n# Output\n\nThe store is never open on the weekend, so today [Calendar()] it is closed.\n\n# Input\n\nx\n\n# Output\n\n|Template|Size|\n|---|---|\n|How many days {ago was, are there until}|400|\n|{past_date, future_date}?| |\n|What {day of the week, day of the month, month, year} was it (current_date \u2013 past_date) {days, weeks, months, years} ago?|800|\n|What {day of the week, day of the month, month, year} will it be in (future_date \u2013 current_date) days?|800|\n|What day of the week {is, was} it on {past_date, future_date}?|400|\n|What {day of the week, day of the month, month, year} {is, was} it {the day before yesterday, yesterday, today, tomorrow, the day after tomorrow}?|4,000|\n|What {day of the week, day of the month, month} {is, was} holiday this year?|1,800|\n|How many {days, weeks, months, years} {ago was, are there until} holiday this year?|1,200|\n|Total|9,400|\n\n# B Toolformer Training\n\nWe use up to 25k examples per API. Max sequence length 1,024. Effective batch size of 128. All models are trained using DeepSpeed\u2019s ZeRO-3 (Rasley et al., 2020). We used 8 NVIDIA A100 40GB GPUs with BF16. Training up to 2k steps, where we evaluate PPL on a small development set from CCNet containing 1,000 examples every 500 steps. We pick the checkpoint that performs best.\n\n# C Zero-Shot Prompts\n\n# C.1 LAMA and TEMPLAMA\n\nFor both LAMA and TEMPLAMA, given an input text x, we use the following prompt: Please complete the following text so that it is factually correct: x.\n\n# C.2 Math Benchmarks\n\nFor all math benchmarks, given a context x and a question q, our prompt is: x q The answer is.\n\n# C.3 Question Answering\n\nFor all question answering datasets, including DATESET, we simply prefix the question with Answer the following question:. We append a question mark if the question does not already end with one.\n\n# C.4 Multilingual Question Answering\n\nFor MLQA, given a context x and a question q, our prompt is: Your task is.\n\n# D DATESET\n\nDATESET is created by first randomly selecting 500 \u201ccurrent dates\u201d. For each current date, another relatively past/future date is randomly selected within a four-year range, and the two dates are used to fill the query templates in Table 11. An example of one such query using the first template would be, \u201cHow many days ago was August 14, 2020?\u201d If called, the Calendar tool would return the presumed current date (e.g., \u201cToday is Sunday, November 20, 2020\u201d).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"8883192f-bd3d-4d39-9db0-3c6b53d2c370": {"node_ids": ["ec8a7138-bc0b-4796-a1d3-10c03540d225"], "metadata": {}}, "a57814ee-8ef7-4d20-a9cd-32cebb57863a": {"node_ids": ["caa2c8f8-fe0e-42d2-b388-a9c89bf91362", "dbe47de2-22dc-4370-a6c6-d5ab52337f9e"], "metadata": {}}, "cea75d86-480b-43d7-aeb0-259c84c50a44": {"node_ids": ["f35649ca-d719-4c11-863a-7c86e64a5e93"], "metadata": {}}, "13207cf7-80cc-45b9-8997-079d14cc8bd7": {"node_ids": ["bccc5874-2299-4003-a744-3c68faff8304"], "metadata": {}}, "27d57489-58df-48c0-a64d-784b7f0f3bd0": {"node_ids": ["df57fd07-e5fd-4e96-ad49-20931720c73d"], "metadata": {}}, "2ffef089-a4de-4b8f-a525-488eee533914": {"node_ids": ["b44bedbc-cb7d-4fe2-b5d6-bab5a5fa1eee"], "metadata": {}}, "4282d3af-4e60-4356-8ad2-9ec5b836bd06": {"node_ids": ["c863c4a8-7ddd-41e2-91b9-7b4437de8981"], "metadata": {}}, "cc275abf-a109-47c0-b1d2-15d0d38f05db": {"node_ids": ["bfde4795-b921-4dd9-809a-6e34c0966eb1"], "metadata": {}}, "51209ac6-cbd7-4a11-909a-bd7205f89928": {"node_ids": ["e9c0b827-993f-4208-b791-016b4dcb0d74", "8abd108d-135b-467c-9bd6-7708d3a4d4f5"], "metadata": {}}, "6ddaad7f-9806-4bdb-894b-505a9065a993": {"node_ids": ["ef3fb455-762a-4a48-b04d-f77c1e84adde", "0e6a81d8-c50c-47a1-8c2f-7dcbfd655ea7"], "metadata": {}}, "909bdcc3-15c2-439f-bd37-95be22277e45": {"node_ids": ["63ff5778-71f1-46a9-9191-e76a1aa9dd54", "5f02555a-9557-469e-9722-3d5ed1499a98"], "metadata": {}}, "606a5e5e-6633-4800-9cc1-0635f0abfa8e": {"node_ids": ["2f4bbb2d-d7a8-4239-9502-723bd3565e93", "f26c6257-f4ce-435a-8ea9-9e1d76595d5b"], "metadata": {}}, "d1140389-bb3a-478e-a038-e98a3e801170": {"node_ids": ["a307cba5-7651-44e5-a87a-6e8284fc43f1", "72e1b9d0-efdb-474c-ad41-154474366c13"], "metadata": {}}, "f90606e5-a9bf-4a1d-a445-5b774319de09": {"node_ids": ["0720e024-1343-475c-87f4-8650201de203", "7b3e9fe1-4037-43ae-b398-7fc8d4d21e61"], "metadata": {}}, "7c3e870f-d94e-47cc-b7ba-8706db2f3342": {"node_ids": ["1eb15478-f3cf-443b-bd0d-fa281e88a335"], "metadata": {}}, "78b896a5-8c17-485f-acca-a5632ef5469f": {"node_ids": ["4b378168-6c4d-4676-842f-a85be6851c0b", "fd01c436-2598-4d7c-be6a-5d826abedfdd"], "metadata": {}}, "91942c04-768a-4427-af6b-f5766072669e": {"node_ids": ["d644ac14-9bf6-4de6-a3e9-2f71a2a0c480"], "metadata": {}}}}